// Code generated by mockery v2.18.0. DO NOT EDIT.

package storage

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockBlobStorage is an autogenerated mock type for the BlobStorage type
type MockBlobStorage struct {
	mock.Mock
}

// GetIngestionInfo provides a mock function with given fields: ctx, name
func (_m *MockBlobStorage) GetIngestionInfo(ctx context.Context, name string) (*Object, error) {
	ret := _m.Called(ctx, name)

	var r0 *Object
	if rf, ok := ret.Get(0).(func(context.Context, string) *Object); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Object)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResultInfo provides a mock function with given fields: ctx, name
func (_m *MockBlobStorage) GetResultInfo(ctx context.Context, name string) (*Object, error) {
	ret := _m.Called(ctx, name)

	var r0 *Object
	if rf, ok := ret.Get(0).(func(context.Context, string) *Object); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Object)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIngestions provides a mock function with given fields: ctx
func (_m *MockBlobStorage) ListIngestions(ctx context.Context) (*[]Object, error) {
	ret := _m.Called(ctx)

	var r0 *[]Object
	if rf, ok := ret.Get(0).(func(context.Context) *[]Object); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]Object)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResults provides a mock function with given fields: ctx
func (_m *MockBlobStorage) ListResults(ctx context.Context) (*[]Object, error) {
	ret := _m.Called(ctx)

	var r0 *[]Object
	if rf, ok := ret.Get(0).(func(context.Context) *[]Object); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]Object)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyBuckets provides a mock function with given fields: ctx
func (_m *MockBlobStorage) VerifyBuckets(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockBlobStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockBlobStorage creates a new instance of MockBlobStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockBlobStorage(t mockConstructorTestingTNewMockBlobStorage) *MockBlobStorage {
	mock := &MockBlobStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
