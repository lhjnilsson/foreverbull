// Code generated by mockery v2.18.0. DO NOT EDIT.

package socket

import (
	mock "github.com/stretchr/testify/mock"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// MockSubscriber is an autogenerated mock type for the Subscriber type
type MockSubscriber struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockSubscriber) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetHost provides a mock function with given fields:
func (_m *MockSubscriber) GetHost() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPort provides a mock function with given fields:
func (_m *MockSubscriber) GetPort() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Receive provides a mock function with given fields: _a0, _a1
func (_m *MockSubscriber) Receive(_a0 protoreflect.ProtoMessage, _a1 ...func(OptionSetter) error) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(protoreflect.ProtoMessage, ...func(OptionSetter) error) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockSubscriber interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockSubscriber creates a new instance of MockSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockSubscriber(t mockConstructorTestingTNewMockSubscriber) *MockSubscriber {
	mock := &MockSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
