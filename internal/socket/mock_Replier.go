// Code generated by mockery v2.46.3. DO NOT EDIT.

package socket

import (
	mock "github.com/stretchr/testify/mock"
	proto "google.golang.org/protobuf/proto"
)

// MockReplier is an autogenerated mock type for the Replier type
type MockReplier struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockReplier) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetHost provides a mock function with given fields:
func (_m *MockReplier) GetHost() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHost")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPort provides a mock function with given fields:
func (_m *MockReplier) GetPort() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPort")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Receive provides a mock function with given fields: msg, opt
func (_m *MockReplier) Receive(msg proto.Message, opt ...func(OptionSetter) error) (ReplierSocket, error) {
	_va := make([]interface{}, len(opt))
	for _i := range opt {
		_va[_i] = opt[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Receive")
	}

	var r0 ReplierSocket
	var r1 error
	if rf, ok := ret.Get(0).(func(proto.Message, ...func(OptionSetter) error) (ReplierSocket, error)); ok {
		return rf(msg, opt...)
	}
	if rf, ok := ret.Get(0).(func(proto.Message, ...func(OptionSetter) error) ReplierSocket); ok {
		r0 = rf(msg, opt...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ReplierSocket)
		}
	}

	if rf, ok := ret.Get(1).(func(proto.Message, ...func(OptionSetter) error) error); ok {
		r1 = rf(msg, opt...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockReplier creates a new instance of MockReplier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReplier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReplier {
	mock := &MockReplier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
