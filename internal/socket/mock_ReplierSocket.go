// Code generated by mockery v2.46.3. DO NOT EDIT.

package socket

import (
	mock "github.com/stretchr/testify/mock"
	proto "google.golang.org/protobuf/proto"
)

// MockReplierSocket is an autogenerated mock type for the ReplierSocket type
type MockReplierSocket struct {
	mock.Mock
}

// Reply provides a mock function with given fields: msg, opt
func (_m *MockReplierSocket) Reply(msg proto.Message, opt ...func(OptionSetter) error) error {
	_va := make([]interface{}, len(opt))
	for _i := range opt {
		_va[_i] = opt[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Reply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(proto.Message, ...func(OptionSetter) error) error); ok {
		r0 = rf(msg, opt...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockReplierSocket creates a new instance of MockReplierSocket. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReplierSocket(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReplierSocket {
	mock := &MockReplierSocket{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
