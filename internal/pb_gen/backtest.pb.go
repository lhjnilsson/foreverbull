// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: backtest.proto

package pb_gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Period struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp              *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PNL                    float64                `protobuf:"fixed64,2,opt,name=PNL,proto3" json:"PNL,omitempty"`
	Returns                float64                `protobuf:"fixed64,3,opt,name=returns,proto3" json:"returns,omitempty"`
	PortfolioValue         float64                `protobuf:"fixed64,4,opt,name=portfolio_value,json=portfolioValue,proto3" json:"portfolio_value,omitempty"`
	LongsCount             int32                  `protobuf:"varint,5,opt,name=longs_count,json=longsCount,proto3" json:"longs_count,omitempty"`
	ShortsCount            int32                  `protobuf:"varint,6,opt,name=shorts_count,json=shortsCount,proto3" json:"shorts_count,omitempty"`
	LongValue              float64                `protobuf:"fixed64,7,opt,name=long_value,json=longValue,proto3" json:"long_value,omitempty"`
	ShortValue             float64                `protobuf:"fixed64,8,opt,name=short_value,json=shortValue,proto3" json:"short_value,omitempty"`
	StartingExposure       float64                `protobuf:"fixed64,9,opt,name=starting_exposure,json=startingExposure,proto3" json:"starting_exposure,omitempty"`
	EndingExposure         float64                `protobuf:"fixed64,10,opt,name=ending_exposure,json=endingExposure,proto3" json:"ending_exposure,omitempty"`
	LongExposure           float64                `protobuf:"fixed64,11,opt,name=long_exposure,json=longExposure,proto3" json:"long_exposure,omitempty"`
	ShortExposure          float64                `protobuf:"fixed64,12,opt,name=short_exposure,json=shortExposure,proto3" json:"short_exposure,omitempty"`
	CapitalUsed            float64                `protobuf:"fixed64,13,opt,name=capital_used,json=capitalUsed,proto3" json:"capital_used,omitempty"`
	GrossLeverage          float64                `protobuf:"fixed64,14,opt,name=gross_leverage,json=grossLeverage,proto3" json:"gross_leverage,omitempty"`
	NetLeverage            float64                `protobuf:"fixed64,15,opt,name=net_leverage,json=netLeverage,proto3" json:"net_leverage,omitempty"`
	StartingValue          float64                `protobuf:"fixed64,16,opt,name=starting_value,json=startingValue,proto3" json:"starting_value,omitempty"`
	EndingValue            float64                `protobuf:"fixed64,17,opt,name=ending_value,json=endingValue,proto3" json:"ending_value,omitempty"`
	StartingCash           float64                `protobuf:"fixed64,18,opt,name=starting_cash,json=startingCash,proto3" json:"starting_cash,omitempty"`
	EndingCash             float64                `protobuf:"fixed64,19,opt,name=ending_cash,json=endingCash,proto3" json:"ending_cash,omitempty"`
	MaxDrawdown            float64                `protobuf:"fixed64,20,opt,name=max_drawdown,json=maxDrawdown,proto3" json:"max_drawdown,omitempty"`
	MaxLeverage            float64                `protobuf:"fixed64,21,opt,name=max_leverage,json=maxLeverage,proto3" json:"max_leverage,omitempty"`
	ExcessReturns          float64                `protobuf:"fixed64,22,opt,name=excess_returns,json=excessReturns,proto3" json:"excess_returns,omitempty"`
	TreasuryPeriodReturn   float64                `protobuf:"fixed64,23,opt,name=treasury_period_return,json=treasuryPeriodReturn,proto3" json:"treasury_period_return,omitempty"`
	AlgorithmPeriodReturn  float64                `protobuf:"fixed64,24,opt,name=algorithm_period_return,json=algorithmPeriodReturn,proto3" json:"algorithm_period_return,omitempty"`
	AlgoVolatility         *float64               `protobuf:"fixed64,25,opt,name=algo_volatility,json=algoVolatility,proto3,oneof" json:"algo_volatility,omitempty"`
	Sharpe                 *float64               `protobuf:"fixed64,26,opt,name=sharpe,proto3,oneof" json:"sharpe,omitempty"`
	Sortino                *float64               `protobuf:"fixed64,27,opt,name=sortino,proto3,oneof" json:"sortino,omitempty"`
	BenchmarkPeriodReturns *float64               `protobuf:"fixed64,28,opt,name=benchmark_period_returns,json=benchmarkPeriodReturns,proto3,oneof" json:"benchmark_period_returns,omitempty"`
	BenchmarkVolatility    *float64               `protobuf:"fixed64,29,opt,name=benchmark_volatility,json=benchmarkVolatility,proto3,oneof" json:"benchmark_volatility,omitempty"`
	Alpha                  *float64               `protobuf:"fixed64,30,opt,name=alpha,proto3,oneof" json:"alpha,omitempty"`
	Beta                   *float64               `protobuf:"fixed64,31,opt,name=beta,proto3,oneof" json:"beta,omitempty"`
}

func (x *Period) Reset() {
	*x = Period{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backtest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Period) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Period) ProtoMessage() {}

func (x *Period) ProtoReflect() protoreflect.Message {
	mi := &file_backtest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Period.ProtoReflect.Descriptor instead.
func (*Period) Descriptor() ([]byte, []int) {
	return file_backtest_proto_rawDescGZIP(), []int{0}
}

func (x *Period) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Period) GetPNL() float64 {
	if x != nil {
		return x.PNL
	}
	return 0
}

func (x *Period) GetReturns() float64 {
	if x != nil {
		return x.Returns
	}
	return 0
}

func (x *Period) GetPortfolioValue() float64 {
	if x != nil {
		return x.PortfolioValue
	}
	return 0
}

func (x *Period) GetLongsCount() int32 {
	if x != nil {
		return x.LongsCount
	}
	return 0
}

func (x *Period) GetShortsCount() int32 {
	if x != nil {
		return x.ShortsCount
	}
	return 0
}

func (x *Period) GetLongValue() float64 {
	if x != nil {
		return x.LongValue
	}
	return 0
}

func (x *Period) GetShortValue() float64 {
	if x != nil {
		return x.ShortValue
	}
	return 0
}

func (x *Period) GetStartingExposure() float64 {
	if x != nil {
		return x.StartingExposure
	}
	return 0
}

func (x *Period) GetEndingExposure() float64 {
	if x != nil {
		return x.EndingExposure
	}
	return 0
}

func (x *Period) GetLongExposure() float64 {
	if x != nil {
		return x.LongExposure
	}
	return 0
}

func (x *Period) GetShortExposure() float64 {
	if x != nil {
		return x.ShortExposure
	}
	return 0
}

func (x *Period) GetCapitalUsed() float64 {
	if x != nil {
		return x.CapitalUsed
	}
	return 0
}

func (x *Period) GetGrossLeverage() float64 {
	if x != nil {
		return x.GrossLeverage
	}
	return 0
}

func (x *Period) GetNetLeverage() float64 {
	if x != nil {
		return x.NetLeverage
	}
	return 0
}

func (x *Period) GetStartingValue() float64 {
	if x != nil {
		return x.StartingValue
	}
	return 0
}

func (x *Period) GetEndingValue() float64 {
	if x != nil {
		return x.EndingValue
	}
	return 0
}

func (x *Period) GetStartingCash() float64 {
	if x != nil {
		return x.StartingCash
	}
	return 0
}

func (x *Period) GetEndingCash() float64 {
	if x != nil {
		return x.EndingCash
	}
	return 0
}

func (x *Period) GetMaxDrawdown() float64 {
	if x != nil {
		return x.MaxDrawdown
	}
	return 0
}

func (x *Period) GetMaxLeverage() float64 {
	if x != nil {
		return x.MaxLeverage
	}
	return 0
}

func (x *Period) GetExcessReturns() float64 {
	if x != nil {
		return x.ExcessReturns
	}
	return 0
}

func (x *Period) GetTreasuryPeriodReturn() float64 {
	if x != nil {
		return x.TreasuryPeriodReturn
	}
	return 0
}

func (x *Period) GetAlgorithmPeriodReturn() float64 {
	if x != nil {
		return x.AlgorithmPeriodReturn
	}
	return 0
}

func (x *Period) GetAlgoVolatility() float64 {
	if x != nil && x.AlgoVolatility != nil {
		return *x.AlgoVolatility
	}
	return 0
}

func (x *Period) GetSharpe() float64 {
	if x != nil && x.Sharpe != nil {
		return *x.Sharpe
	}
	return 0
}

func (x *Period) GetSortino() float64 {
	if x != nil && x.Sortino != nil {
		return *x.Sortino
	}
	return 0
}

func (x *Period) GetBenchmarkPeriodReturns() float64 {
	if x != nil && x.BenchmarkPeriodReturns != nil {
		return *x.BenchmarkPeriodReturns
	}
	return 0
}

func (x *Period) GetBenchmarkVolatility() float64 {
	if x != nil && x.BenchmarkVolatility != nil {
		return *x.BenchmarkVolatility
	}
	return 0
}

func (x *Period) GetAlpha() float64 {
	if x != nil && x.Alpha != nil {
		return *x.Alpha
	}
	return 0
}

func (x *Period) GetBeta() float64 {
	if x != nil && x.Beta != nil {
		return *x.Beta
	}
	return 0
}

var File_backtest_proto protoreflect.FileDescriptor

var file_backtest_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x0a, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x50, 0x4e, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x50, 0x4e, 0x4c, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x72, 0x74,
	0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c,
	0x6f, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72,
	0x6f, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61,
	0x73, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x72, 0x61, 0x77,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44,
	0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12,
	0x2c, 0x0a, 0x0f, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x6c, 0x67, 0x6f,
	0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x68, 0x61, 0x72, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52,
	0x06, 0x73, 0x68, 0x61, 0x72, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x07, 0x73,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x16, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x13, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x05, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x62,
	0x65, 0x74, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x04, 0x62, 0x65, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x76, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x6f, 0x42,
	0x1b, 0x0a, 0x19, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x62, 0x65, 0x74, 0x61, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x70, 0x62,
	0x5f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backtest_proto_rawDescOnce sync.Once
	file_backtest_proto_rawDescData = file_backtest_proto_rawDesc
)

func file_backtest_proto_rawDescGZIP() []byte {
	file_backtest_proto_rawDescOnce.Do(func() {
		file_backtest_proto_rawDescData = protoimpl.X.CompressGZIP(file_backtest_proto_rawDescData)
	})
	return file_backtest_proto_rawDescData
}

var file_backtest_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_backtest_proto_goTypes = []any{
	(*Period)(nil),                // 0: foreverbull.backtest.Period
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
}
var file_backtest_proto_depIdxs = []int32{
	1, // 0: foreverbull.backtest.Period.timestamp:type_name -> google.protobuf.Timestamp
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_backtest_proto_init() }
func file_backtest_proto_init() {
	if File_backtest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_backtest_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Period); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_backtest_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backtest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_backtest_proto_goTypes,
		DependencyIndexes: file_backtest_proto_depIdxs,
		MessageInfos:      file_backtest_proto_msgTypes,
	}.Build()
	File_backtest_proto = out.File
	file_backtest_proto_rawDesc = nil
	file_backtest_proto_goTypes = nil
	file_backtest_proto_depIdxs = nil
}
