// Code generated by mockery v2.46.3. DO NOT EDIT.

package pb

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockHealthServer is an autogenerated mock type for the HealthServer type
type MockHealthServer struct {
	mock.Mock
}

// Check provides a mock function with given fields: _a0, _a1
func (_m *MockHealthServer) Check(_a0 context.Context, _a1 *emptypb.Empty) (*HealthCheckResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 *HealthCheckResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty) *HealthCheckResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*HealthCheckResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedHealthServer provides a mock function with given fields:
func (_m *MockHealthServer) mustEmbedUnimplementedHealthServer() {
	_m.Called()
}

// NewMockHealthServer creates a new instance of MockHealthServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHealthServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHealthServer {
	mock := &MockHealthServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
