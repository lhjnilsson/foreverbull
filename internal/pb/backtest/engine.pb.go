// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: foreverbull/pb/backtest/engine.proto

package backtest

import (
	finance "github.com/lhjnilsson/foreverbull/internal/pb/finance"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IngestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Symbols   []string               `protobuf:"bytes,3,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *IngestRequest) Reset() {
	*x = IngestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestRequest) ProtoMessage() {}

func (x *IngestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestRequest.ProtoReflect.Descriptor instead.
func (*IngestRequest) Descriptor() ([]byte, []int) {
	return file_foreverbull_pb_backtest_engine_proto_rawDescGZIP(), []int{0}
}

func (x *IngestRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *IngestRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *IngestRequest) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

type IngestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Symbols   []string               `protobuf:"bytes,3,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *IngestResponse) Reset() {
	*x = IngestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestResponse) ProtoMessage() {}

func (x *IngestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestResponse.ProtoReflect.Descriptor instead.
func (*IngestResponse) Descriptor() ([]byte, []int) {
	return file_foreverbull_pb_backtest_engine_proto_rawDescGZIP(), []int{1}
}

func (x *IngestResponse) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *IngestResponse) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *IngestResponse) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

type ConfigureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Symbols   []string               `protobuf:"bytes,3,rep,name=symbols,proto3" json:"symbols,omitempty"`
	Benchmark *string                `protobuf:"bytes,4,opt,name=benchmark,proto3,oneof" json:"benchmark,omitempty"`
}

func (x *ConfigureRequest) Reset() {
	*x = ConfigureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureRequest) ProtoMessage() {}

func (x *ConfigureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureRequest.ProtoReflect.Descriptor instead.
func (*ConfigureRequest) Descriptor() ([]byte, []int) {
	return file_foreverbull_pb_backtest_engine_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigureRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ConfigureRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ConfigureRequest) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *ConfigureRequest) GetBenchmark() string {
	if x != nil && x.Benchmark != nil {
		return *x.Benchmark
	}
	return ""
}

type ConfigureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Symbols   []string               `protobuf:"bytes,3,rep,name=symbols,proto3" json:"symbols,omitempty"`
	Benchmark *string                `protobuf:"bytes,4,opt,name=benchmark,proto3,oneof" json:"benchmark,omitempty"`
}

func (x *ConfigureResponse) Reset() {
	*x = ConfigureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureResponse) ProtoMessage() {}

func (x *ConfigureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureResponse.ProtoReflect.Descriptor instead.
func (*ConfigureResponse) Descriptor() ([]byte, []int) {
	return file_foreverbull_pb_backtest_engine_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigureResponse) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ConfigureResponse) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ConfigureResponse) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *ConfigureResponse) GetBenchmark() string {
	if x != nil && x.Benchmark != nil {
		return *x.Benchmark
	}
	return ""
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol        string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Amount        int32                  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	CostBasis     float64                `protobuf:"fixed64,3,opt,name=cost_basis,json=costBasis,proto3" json:"cost_basis,omitempty"`
	LastSalePrice float64                `protobuf:"fixed64,4,opt,name=last_sale_price,json=lastSalePrice,proto3" json:"last_sale_price,omitempty"`
	LastSaleDate  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_sale_date,json=lastSaleDate,proto3" json:"last_sale_date,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_foreverbull_pb_backtest_engine_proto_rawDescGZIP(), []int{4}
}

func (x *Position) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Position) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Position) GetCostBasis() float64 {
	if x != nil {
		return x.CostBasis
	}
	return 0
}

func (x *Position) GetLastSalePrice() float64 {
	if x != nil {
		return x.LastSalePrice
	}
	return 0
}

func (x *Position) GetLastSaleDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSaleDate
	}
	return nil
}

type GetPortfolioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CashFlow          float64                `protobuf:"fixed64,2,opt,name=cash_flow,json=cashFlow,proto3" json:"cash_flow,omitempty"`
	StartingCash      float64                `protobuf:"fixed64,3,opt,name=starting_cash,json=startingCash,proto3" json:"starting_cash,omitempty"`
	PortfolioValue    float64                `protobuf:"fixed64,4,opt,name=portfolio_value,json=portfolioValue,proto3" json:"portfolio_value,omitempty"`
	Pnl               float64                `protobuf:"fixed64,5,opt,name=pnl,proto3" json:"pnl,omitempty"`
	Returns           float64                `protobuf:"fixed64,6,opt,name=returns,proto3" json:"returns,omitempty"`
	Cash              float64                `protobuf:"fixed64,7,opt,name=cash,proto3" json:"cash,omitempty"`
	PositionsValue    float64                `protobuf:"fixed64,8,opt,name=positions_value,json=positionsValue,proto3" json:"positions_value,omitempty"`
	PositionsExposure float64                `protobuf:"fixed64,9,opt,name=positions_exposure,json=positionsExposure,proto3" json:"positions_exposure,omitempty"`
	Positions         []*Position            `protobuf:"bytes,10,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *GetPortfolioResponse) Reset() {
	*x = GetPortfolioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortfolioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortfolioResponse) ProtoMessage() {}

func (x *GetPortfolioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortfolioResponse.ProtoReflect.Descriptor instead.
func (*GetPortfolioResponse) Descriptor() ([]byte, []int) {
	return file_foreverbull_pb_backtest_engine_proto_rawDescGZIP(), []int{5}
}

func (x *GetPortfolioResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GetPortfolioResponse) GetCashFlow() float64 {
	if x != nil {
		return x.CashFlow
	}
	return 0
}

func (x *GetPortfolioResponse) GetStartingCash() float64 {
	if x != nil {
		return x.StartingCash
	}
	return 0
}

func (x *GetPortfolioResponse) GetPortfolioValue() float64 {
	if x != nil {
		return x.PortfolioValue
	}
	return 0
}

func (x *GetPortfolioResponse) GetPnl() float64 {
	if x != nil {
		return x.Pnl
	}
	return 0
}

func (x *GetPortfolioResponse) GetReturns() float64 {
	if x != nil {
		return x.Returns
	}
	return 0
}

func (x *GetPortfolioResponse) GetCash() float64 {
	if x != nil {
		return x.Cash
	}
	return 0
}

func (x *GetPortfolioResponse) GetPositionsValue() float64 {
	if x != nil {
		return x.PositionsValue
	}
	return 0
}

func (x *GetPortfolioResponse) GetPositionsExposure() float64 {
	if x != nil {
		return x.PositionsExposure
	}
	return 0
}

func (x *GetPortfolioResponse) GetPositions() []*Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Amount int32  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_foreverbull_pb_backtest_engine_proto_rawDescGZIP(), []int{6}
}

func (x *Order) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Order) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type ContinueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *ContinueRequest) Reset() {
	*x = ContinueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinueRequest) ProtoMessage() {}

func (x *ContinueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinueRequest.ProtoReflect.Descriptor instead.
func (*ContinueRequest) Descriptor() ([]byte, []int) {
	return file_foreverbull_pb_backtest_engine_proto_rawDescGZIP(), []int{7}
}

func (x *ContinueRequest) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

type UploadResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Execution string `protobuf:"bytes,1,opt,name=execution,proto3" json:"execution,omitempty"`
}

func (x *UploadResultRequest) Reset() {
	*x = UploadResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResultRequest) ProtoMessage() {}

func (x *UploadResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResultRequest.ProtoReflect.Descriptor instead.
func (*UploadResultRequest) Descriptor() ([]byte, []int) {
	return file_foreverbull_pb_backtest_engine_proto_rawDescGZIP(), []int{8}
}

func (x *UploadResultRequest) GetExecution() string {
	if x != nil {
		return x.Execution
	}
	return ""
}

type Period struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp             *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PNL                   float64                `protobuf:"fixed64,2,opt,name=PNL,proto3" json:"PNL,omitempty"`
	Returns               float64                `protobuf:"fixed64,3,opt,name=returns,proto3" json:"returns,omitempty"`
	PortfolioValue        float64                `protobuf:"fixed64,4,opt,name=portfolio_value,json=portfolioValue,proto3" json:"portfolio_value,omitempty"`
	LongsCount            int32                  `protobuf:"varint,5,opt,name=longs_count,json=longsCount,proto3" json:"longs_count,omitempty"`
	ShortsCount           int32                  `protobuf:"varint,6,opt,name=shorts_count,json=shortsCount,proto3" json:"shorts_count,omitempty"`
	LongValue             float64                `protobuf:"fixed64,7,opt,name=long_value,json=longValue,proto3" json:"long_value,omitempty"`
	ShortValue            float64                `protobuf:"fixed64,8,opt,name=short_value,json=shortValue,proto3" json:"short_value,omitempty"`
	StartingExposure      float64                `protobuf:"fixed64,9,opt,name=starting_exposure,json=startingExposure,proto3" json:"starting_exposure,omitempty"`
	EndingExposure        float64                `protobuf:"fixed64,10,opt,name=ending_exposure,json=endingExposure,proto3" json:"ending_exposure,omitempty"`
	LongExposure          float64                `protobuf:"fixed64,11,opt,name=long_exposure,json=longExposure,proto3" json:"long_exposure,omitempty"`
	ShortExposure         float64                `protobuf:"fixed64,12,opt,name=short_exposure,json=shortExposure,proto3" json:"short_exposure,omitempty"`
	CapitalUsed           float64                `protobuf:"fixed64,13,opt,name=capital_used,json=capitalUsed,proto3" json:"capital_used,omitempty"`
	GrossLeverage         float64                `protobuf:"fixed64,14,opt,name=gross_leverage,json=grossLeverage,proto3" json:"gross_leverage,omitempty"`
	NetLeverage           float64                `protobuf:"fixed64,15,opt,name=net_leverage,json=netLeverage,proto3" json:"net_leverage,omitempty"`
	StartingValue         float64                `protobuf:"fixed64,16,opt,name=starting_value,json=startingValue,proto3" json:"starting_value,omitempty"`
	EndingValue           float64                `protobuf:"fixed64,17,opt,name=ending_value,json=endingValue,proto3" json:"ending_value,omitempty"`
	StartingCash          float64                `protobuf:"fixed64,18,opt,name=starting_cash,json=startingCash,proto3" json:"starting_cash,omitempty"`
	EndingCash            float64                `protobuf:"fixed64,19,opt,name=ending_cash,json=endingCash,proto3" json:"ending_cash,omitempty"`
	MaxDrawdown           float64                `protobuf:"fixed64,20,opt,name=max_drawdown,json=maxDrawdown,proto3" json:"max_drawdown,omitempty"`
	MaxLeverage           float64                `protobuf:"fixed64,21,opt,name=max_leverage,json=maxLeverage,proto3" json:"max_leverage,omitempty"`
	ExcessReturn          float64                `protobuf:"fixed64,22,opt,name=excess_return,json=excessReturn,proto3" json:"excess_return,omitempty"`
	TreasuryPeriodReturn  float64                `protobuf:"fixed64,23,opt,name=treasury_period_return,json=treasuryPeriodReturn,proto3" json:"treasury_period_return,omitempty"`
	AlgorithmPeriodReturn float64                `protobuf:"fixed64,24,opt,name=algorithm_period_return,json=algorithmPeriodReturn,proto3" json:"algorithm_period_return,omitempty"`
	AlgoVolatility        *float64               `protobuf:"fixed64,25,opt,name=algo_volatility,json=algoVolatility,proto3,oneof" json:"algo_volatility,omitempty"`
	Sharpe                *float64               `protobuf:"fixed64,26,opt,name=sharpe,proto3,oneof" json:"sharpe,omitempty"`
	Sortino               *float64               `protobuf:"fixed64,27,opt,name=sortino,proto3,oneof" json:"sortino,omitempty"`
	BenchmarkPeriodReturn *float64               `protobuf:"fixed64,28,opt,name=benchmark_period_return,json=benchmarkPeriodReturn,proto3,oneof" json:"benchmark_period_return,omitempty"`
	BenchmarkVolatility   *float64               `protobuf:"fixed64,29,opt,name=benchmark_volatility,json=benchmarkVolatility,proto3,oneof" json:"benchmark_volatility,omitempty"`
	Alpha                 *float64               `protobuf:"fixed64,30,opt,name=alpha,proto3,oneof" json:"alpha,omitempty"`
	Beta                  *float64               `protobuf:"fixed64,31,opt,name=beta,proto3,oneof" json:"beta,omitempty"`
	Positions             []*finance.Position    `protobuf:"bytes,32,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *Period) Reset() {
	*x = Period{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Period) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Period) ProtoMessage() {}

func (x *Period) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Period.ProtoReflect.Descriptor instead.
func (*Period) Descriptor() ([]byte, []int) {
	return file_foreverbull_pb_backtest_engine_proto_rawDescGZIP(), []int{9}
}

func (x *Period) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Period) GetPNL() float64 {
	if x != nil {
		return x.PNL
	}
	return 0
}

func (x *Period) GetReturns() float64 {
	if x != nil {
		return x.Returns
	}
	return 0
}

func (x *Period) GetPortfolioValue() float64 {
	if x != nil {
		return x.PortfolioValue
	}
	return 0
}

func (x *Period) GetLongsCount() int32 {
	if x != nil {
		return x.LongsCount
	}
	return 0
}

func (x *Period) GetShortsCount() int32 {
	if x != nil {
		return x.ShortsCount
	}
	return 0
}

func (x *Period) GetLongValue() float64 {
	if x != nil {
		return x.LongValue
	}
	return 0
}

func (x *Period) GetShortValue() float64 {
	if x != nil {
		return x.ShortValue
	}
	return 0
}

func (x *Period) GetStartingExposure() float64 {
	if x != nil {
		return x.StartingExposure
	}
	return 0
}

func (x *Period) GetEndingExposure() float64 {
	if x != nil {
		return x.EndingExposure
	}
	return 0
}

func (x *Period) GetLongExposure() float64 {
	if x != nil {
		return x.LongExposure
	}
	return 0
}

func (x *Period) GetShortExposure() float64 {
	if x != nil {
		return x.ShortExposure
	}
	return 0
}

func (x *Period) GetCapitalUsed() float64 {
	if x != nil {
		return x.CapitalUsed
	}
	return 0
}

func (x *Period) GetGrossLeverage() float64 {
	if x != nil {
		return x.GrossLeverage
	}
	return 0
}

func (x *Period) GetNetLeverage() float64 {
	if x != nil {
		return x.NetLeverage
	}
	return 0
}

func (x *Period) GetStartingValue() float64 {
	if x != nil {
		return x.StartingValue
	}
	return 0
}

func (x *Period) GetEndingValue() float64 {
	if x != nil {
		return x.EndingValue
	}
	return 0
}

func (x *Period) GetStartingCash() float64 {
	if x != nil {
		return x.StartingCash
	}
	return 0
}

func (x *Period) GetEndingCash() float64 {
	if x != nil {
		return x.EndingCash
	}
	return 0
}

func (x *Period) GetMaxDrawdown() float64 {
	if x != nil {
		return x.MaxDrawdown
	}
	return 0
}

func (x *Period) GetMaxLeverage() float64 {
	if x != nil {
		return x.MaxLeverage
	}
	return 0
}

func (x *Period) GetExcessReturn() float64 {
	if x != nil {
		return x.ExcessReturn
	}
	return 0
}

func (x *Period) GetTreasuryPeriodReturn() float64 {
	if x != nil {
		return x.TreasuryPeriodReturn
	}
	return 0
}

func (x *Period) GetAlgorithmPeriodReturn() float64 {
	if x != nil {
		return x.AlgorithmPeriodReturn
	}
	return 0
}

func (x *Period) GetAlgoVolatility() float64 {
	if x != nil && x.AlgoVolatility != nil {
		return *x.AlgoVolatility
	}
	return 0
}

func (x *Period) GetSharpe() float64 {
	if x != nil && x.Sharpe != nil {
		return *x.Sharpe
	}
	return 0
}

func (x *Period) GetSortino() float64 {
	if x != nil && x.Sortino != nil {
		return *x.Sortino
	}
	return 0
}

func (x *Period) GetBenchmarkPeriodReturn() float64 {
	if x != nil && x.BenchmarkPeriodReturn != nil {
		return *x.BenchmarkPeriodReturn
	}
	return 0
}

func (x *Period) GetBenchmarkVolatility() float64 {
	if x != nil && x.BenchmarkVolatility != nil {
		return *x.BenchmarkVolatility
	}
	return 0
}

func (x *Period) GetAlpha() float64 {
	if x != nil && x.Alpha != nil {
		return *x.Alpha
	}
	return 0
}

func (x *Period) GetBeta() float64 {
	if x != nil && x.Beta != nil {
		return *x.Beta
	}
	return 0
}

func (x *Period) GetPositions() []*finance.Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

type ResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Periods []*Period `protobuf:"bytes,1,rep,name=periods,proto3" json:"periods,omitempty"`
}

func (x *ResultResponse) Reset() {
	*x = ResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultResponse) ProtoMessage() {}

func (x *ResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_pb_backtest_engine_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultResponse.ProtoReflect.Descriptor instead.
func (*ResultResponse) Descriptor() ([]byte, []int) {
	return file_foreverbull_pb_backtest_engine_proto_rawDescGZIP(), []int{10}
}

func (x *ResultResponse) GetPeriods() []*Period {
	if x != nil {
		return x.Periods
	}
	return nil
}

var File_foreverbull_pb_backtest_engine_proto protoreflect.FileDescriptor

var file_foreverbull_pb_backtest_engine_proto_rawDesc = []byte{
	0x0a, 0x24, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2f, 0x70, 0x62,
	0x2f, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62,
	0x75, 0x6c, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2f, 0x70, 0x62,
	0x2f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xd0, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xc3, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x61,
	0x73, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x42,
	0x61, 0x73, 0x69, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x61, 0x6c,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x94,
	0x03, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x61, 0x73, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x6f,
	0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x6e, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x6e, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x73, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x70, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x37, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x49,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e,
	0x70, 0x62, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x33, 0x0a, 0x13, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd9,
	0x0a, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x4e, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x50, 0x4e, 0x4c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f,
	0x6c, 0x69, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x6e, 0x67,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c,
	0x6f, 0x6e, 0x67, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x73, 0x73,
	0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x6e, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x36, 0x0a, 0x17,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x76, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52,
	0x0e, 0x61, 0x6c, 0x67, 0x6f, 0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x01, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x02, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3b,
	0x0a, 0x17, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x03, 0x52, 0x15, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x13, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x05, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x62, 0x65, 0x74, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x04,
	0x62, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6f, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x6c, 0x67, 0x6f,
	0x5f, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x6f, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x76, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x65, 0x74, 0x61, 0x22, 0x4b, 0x0a, 0x0e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x68, 0x6a, 0x6e, 0x69, 0x6c, 0x73, 0x73, 0x6f, 0x6e,
	0x2f, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_foreverbull_pb_backtest_engine_proto_rawDescOnce sync.Once
	file_foreverbull_pb_backtest_engine_proto_rawDescData = file_foreverbull_pb_backtest_engine_proto_rawDesc
)

func file_foreverbull_pb_backtest_engine_proto_rawDescGZIP() []byte {
	file_foreverbull_pb_backtest_engine_proto_rawDescOnce.Do(func() {
		file_foreverbull_pb_backtest_engine_proto_rawDescData = protoimpl.X.CompressGZIP(file_foreverbull_pb_backtest_engine_proto_rawDescData)
	})
	return file_foreverbull_pb_backtest_engine_proto_rawDescData
}

var file_foreverbull_pb_backtest_engine_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_foreverbull_pb_backtest_engine_proto_goTypes = []any{
	(*IngestRequest)(nil),         // 0: foreverbull.pb.backtest.IngestRequest
	(*IngestResponse)(nil),        // 1: foreverbull.pb.backtest.IngestResponse
	(*ConfigureRequest)(nil),      // 2: foreverbull.pb.backtest.ConfigureRequest
	(*ConfigureResponse)(nil),     // 3: foreverbull.pb.backtest.ConfigureResponse
	(*Position)(nil),              // 4: foreverbull.pb.backtest.Position
	(*GetPortfolioResponse)(nil),  // 5: foreverbull.pb.backtest.GetPortfolioResponse
	(*Order)(nil),                 // 6: foreverbull.pb.backtest.Order
	(*ContinueRequest)(nil),       // 7: foreverbull.pb.backtest.ContinueRequest
	(*UploadResultRequest)(nil),   // 8: foreverbull.pb.backtest.UploadResultRequest
	(*Period)(nil),                // 9: foreverbull.pb.backtest.Period
	(*ResultResponse)(nil),        // 10: foreverbull.pb.backtest.ResultResponse
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
	(*finance.Position)(nil),      // 12: foreverbull.pb.finance.Position
}
var file_foreverbull_pb_backtest_engine_proto_depIdxs = []int32{
	11, // 0: foreverbull.pb.backtest.IngestRequest.start_date:type_name -> google.protobuf.Timestamp
	11, // 1: foreverbull.pb.backtest.IngestRequest.end_date:type_name -> google.protobuf.Timestamp
	11, // 2: foreverbull.pb.backtest.IngestResponse.start_date:type_name -> google.protobuf.Timestamp
	11, // 3: foreverbull.pb.backtest.IngestResponse.end_date:type_name -> google.protobuf.Timestamp
	11, // 4: foreverbull.pb.backtest.ConfigureRequest.start_date:type_name -> google.protobuf.Timestamp
	11, // 5: foreverbull.pb.backtest.ConfigureRequest.end_date:type_name -> google.protobuf.Timestamp
	11, // 6: foreverbull.pb.backtest.ConfigureResponse.start_date:type_name -> google.protobuf.Timestamp
	11, // 7: foreverbull.pb.backtest.ConfigureResponse.end_date:type_name -> google.protobuf.Timestamp
	11, // 8: foreverbull.pb.backtest.Position.last_sale_date:type_name -> google.protobuf.Timestamp
	11, // 9: foreverbull.pb.backtest.GetPortfolioResponse.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 10: foreverbull.pb.backtest.GetPortfolioResponse.positions:type_name -> foreverbull.pb.backtest.Position
	6,  // 11: foreverbull.pb.backtest.ContinueRequest.orders:type_name -> foreverbull.pb.backtest.Order
	11, // 12: foreverbull.pb.backtest.Period.timestamp:type_name -> google.protobuf.Timestamp
	12, // 13: foreverbull.pb.backtest.Period.positions:type_name -> foreverbull.pb.finance.Position
	9,  // 14: foreverbull.pb.backtest.ResultResponse.periods:type_name -> foreverbull.pb.backtest.Period
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_foreverbull_pb_backtest_engine_proto_init() }
func file_foreverbull_pb_backtest_engine_proto_init() {
	if File_foreverbull_pb_backtest_engine_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_foreverbull_pb_backtest_engine_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*IngestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_pb_backtest_engine_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*IngestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_pb_backtest_engine_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ConfigureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_pb_backtest_engine_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ConfigureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_pb_backtest_engine_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_pb_backtest_engine_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetPortfolioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_pb_backtest_engine_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_pb_backtest_engine_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ContinueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_pb_backtest_engine_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UploadResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_pb_backtest_engine_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Period); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_pb_backtest_engine_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_foreverbull_pb_backtest_engine_proto_msgTypes[2].OneofWrappers = []any{}
	file_foreverbull_pb_backtest_engine_proto_msgTypes[3].OneofWrappers = []any{}
	file_foreverbull_pb_backtest_engine_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_foreverbull_pb_backtest_engine_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_foreverbull_pb_backtest_engine_proto_goTypes,
		DependencyIndexes: file_foreverbull_pb_backtest_engine_proto_depIdxs,
		MessageInfos:      file_foreverbull_pb_backtest_engine_proto_msgTypes,
	}.Build()
	File_foreverbull_pb_backtest_engine_proto = out.File
	file_foreverbull_pb_backtest_engine_proto_rawDesc = nil
	file_foreverbull_pb_backtest_engine_proto_goTypes = nil
	file_foreverbull_pb_backtest_engine_proto_depIdxs = nil
}
