// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/lhjnilsson/foreverbull/finance/entity"

	mock "github.com/stretchr/testify/mock"
)

// Execution is an autogenerated mock type for the Execution type
type Execution struct {
	mock.Mock
}

// Configure provides a mock function with given fields: ctx
func (_m *Execution) Configure(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Run provides a mock function with given fields: ctx, p
func (_m *Execution) Run(ctx context.Context, p *entity.Portfolio) (*[]entity.Order, error) {
	ret := _m.Called(ctx, p)

	var r0 *[]entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Portfolio) (*[]entity.Order, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Portfolio) *[]entity.Order); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Portfolio) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields: ctx
func (_m *Execution) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewExecution creates a new instance of Execution. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecution(t interface {
	mock.TestingT
	Cleanup(func())
}) *Execution {
	mock := &Execution{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
