// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	engine "github.com/lhjnilsson/foreverbull/service/backtest/engine"
	message "github.com/lhjnilsson/foreverbull/service/message"

	mock "github.com/stretchr/testify/mock"
)

// Engine is an autogenerated mock type for the Engine type
type Engine struct {
	mock.Mock
}

// ConfigureExecution provides a mock function with given fields: _a0, _a1
func (_m *Engine) ConfigureExecution(_a0 context.Context, _a1 *engine.BacktestConfig) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *engine.BacktestConfig) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Continue provides a mock function with given fields:
func (_m *Engine) Continue() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadIngestion provides a mock function with given fields: _a0, _a1
func (_m *Engine) DownloadIngestion(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBroker provides a mock function with given fields:
func (_m *Engine) GetBroker() engine.Broker {
	ret := _m.Called()

	var r0 engine.Broker
	if rf, ok := ret.Get(0).(func() engine.Broker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(engine.Broker)
		}
	}

	return r0
}

// GetExecutionResult provides a mock function with given fields: execution
func (_m *Engine) GetExecutionResult(execution *engine.Execution) (*message.Response, error) {
	ret := _m.Called(execution)

	var r0 *message.Response
	if rf, ok := ret.Get(0).(func(*engine.Execution) *message.Response); ok {
		r0 = rf(execution)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*message.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*engine.Execution) error); ok {
		r1 = rf(execution)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessage provides a mock function with given fields:
func (_m *Engine) GetMessage() (*message.Response, error) {
	ret := _m.Called()

	var r0 *message.Response
	if rf, ok := ret.Get(0).(func() *message.Response); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*message.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ingest provides a mock function with given fields: _a0, _a1
func (_m *Engine) Ingest(_a0 context.Context, _a1 *engine.IngestConfig) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *engine.IngestConfig) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunExecution provides a mock function with given fields: _a0
func (_m *Engine) RunExecution(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: _a0
func (_m *Engine) Stop(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadIngestion provides a mock function with given fields: _a0, _a1
func (_m *Engine) UploadIngestion(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewEngine interface {
	mock.TestingT
	Cleanup(func())
}

// NewEngine creates a new instance of Engine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEngine(t mockConstructorTestingTNewEngine) *Engine {
	mock := &Engine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
