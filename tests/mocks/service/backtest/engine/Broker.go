// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	entity "github.com/lhjnilsson/foreverbull/finance/entity"
	mock "github.com/stretchr/testify/mock"
)

// Broker is an autogenerated mock type for the Broker type
type Broker struct {
	mock.Mock
}

// CancelOrder provides a mock function with given fields: order
func (_m *Broker) CancelOrder(order *entity.Order) error {
	ret := _m.Called(order)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrder provides a mock function with given fields: _a0
func (_m *Broker) GetOrder(_a0 *entity.Order) (*entity.Order, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Order) (*entity.Order, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Order) *entity.Order); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Order) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Order provides a mock function with given fields: _a0
func (_m *Broker) Order(_a0 *entity.Order) (*entity.Order, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Order) (*entity.Order, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Order) *entity.Order); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Order) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBroker creates a new instance of Broker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBroker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Broker {
	mock := &Broker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
