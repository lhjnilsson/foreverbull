// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/docker/docker/api/types"
	mock "github.com/stretchr/testify/mock"
)

// Container is an autogenerated mock type for the Container type
type Container struct {
	mock.Mock
}

// Info provides a mock function with given fields: ctx, containerID
func (_m *Container) Info(ctx context.Context, containerID string) (types.ImageInspect, error) {
	ret := _m.Called(ctx, containerID)

	var r0 types.ImageInspect
	if rf, ok := ret.Get(0).(func(context.Context, string) types.ImageInspect); ok {
		r0 = rf(ctx, containerID)
	} else {
		r0 = ret.Get(0).(types.ImageInspect)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, containerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pull provides a mock function with given fields: ctx, imageID
func (_m *Container) Pull(ctx context.Context, imageID string) error {
	ret := _m.Called(ctx, imageID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, imageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveImage provides a mock function with given fields: ctx, containerID, name
func (_m *Container) SaveImage(ctx context.Context, containerID string, name string) error {
	ret := _m.Called(ctx, containerID, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, containerID, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: ctx, serviceName, image, containerID, extraLabels
func (_m *Container) Start(ctx context.Context, serviceName string, image string, containerID string, extraLabels map[string]string) (string, error) {
	ret := _m.Called(ctx, serviceName, image, containerID, extraLabels)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, map[string]string) string); ok {
		r0 = rf(ctx, serviceName, image, containerID, extraLabels)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, map[string]string) error); ok {
		r1 = rf(ctx, serviceName, image, containerID, extraLabels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields: ctx, containerID, remove
func (_m *Container) Stop(ctx context.Context, containerID string, remove bool) error {
	ret := _m.Called(ctx, containerID, remove)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, containerID, remove)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopAll provides a mock function with given fields: ctx, remove
func (_m *Container) StopAll(ctx context.Context, remove bool) error {
	ret := _m.Called(ctx, remove)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) error); ok {
		r0 = rf(ctx, remove)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewContainer interface {
	mock.TestingT
	Cleanup(func())
}

// NewContainer creates a new instance of Container. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContainer(t mockConstructorTestingTNewContainer) *Container {
	mock := &Container{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
