// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/lhjnilsson/foreverbull/finance/entity"
	mock "github.com/stretchr/testify/mock"

	socket "github.com/lhjnilsson/foreverbull/service/socket"

	time "time"

	worker "github.com/lhjnilsson/foreverbull/service/worker"
)

// Pool is an autogenerated mock type for the Pool type
type Pool struct {
	mock.Mock
}

// ConfigureExecution provides a mock function with given fields: _a0, _a1
func (_m *Pool) ConfigureExecution(_a0 context.Context, _a1 *worker.Configuration) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *worker.Configuration) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Process provides a mock function with given fields: ctx, execution, timestamp, symbol
func (_m *Pool) Process(ctx context.Context, execution string, timestamp time.Time, symbol string) (*entity.Order, error) {
	ret := _m.Called(ctx, execution, timestamp, symbol)

	var r0 *entity.Order
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, string) *entity.Order); ok {
		r0 = rf(ctx, execution, timestamp, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, string) error); ok {
		r1 = rf(ctx, execution, timestamp, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunExecution provides a mock function with given fields: _a0
func (_m *Pool) RunExecution(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SocketConfig provides a mock function with given fields:
func (_m *Pool) SocketConfig() *socket.Socket {
	ret := _m.Called()

	var r0 *socket.Socket
	if rf, ok := ret.Get(0).(func() *socket.Socket); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*socket.Socket)
		}
	}

	return r0
}

// Stop provides a mock function with given fields: _a0
func (_m *Pool) Stop(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopExecution provides a mock function with given fields: _a0
func (_m *Pool) StopExecution(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPool interface {
	mock.TestingT
	Cleanup(func())
}

// NewPool creates a new instance of Pool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPool(t mockConstructorTestingTNewPool) *Pool {
	mock := &Pool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
