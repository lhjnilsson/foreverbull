// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	socket "github.com/lhjnilsson/foreverbull/pkg/service/socket"
	mock "github.com/stretchr/testify/mock"
)

// ContextSocket is an autogenerated mock type for the ContextSocket type
type ContextSocket struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *ContextSocket) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields:
func (_m *ContextSocket) Get() (socket.ReadWriter, error) {
	ret := _m.Called()

	var r0 socket.ReadWriter
	if rf, ok := ret.Get(0).(func() socket.ReadWriter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(socket.ReadWriter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewContextSocket interface {
	mock.TestingT
	Cleanup(func())
}

// NewContextSocket creates a new instance of ContextSocket. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContextSocket(t mockConstructorTestingTNewContextSocket) *ContextSocket {
	mock := &ContextSocket{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
