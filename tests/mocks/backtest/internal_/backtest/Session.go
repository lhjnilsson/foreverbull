// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/lhjnilsson/foreverbull/backtest/entity"
	mock "github.com/stretchr/testify/mock"

	socket "github.com/lhjnilsson/foreverbull/service/socket"
)

// Session is an autogenerated mock type for the Session type
type Session struct {
	mock.Mock
}

// GetSocket provides a mock function with given fields:
func (_m *Session) GetSocket() *socket.Socket {
	ret := _m.Called()

	var r0 *socket.Socket
	if rf, ok := ret.Get(0).(func() *socket.Socket); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*socket.Socket)
		}
	}

	return r0
}

// Run provides a mock function with given fields: _a0, _a1
func (_m *Session) Run(_a0 chan<- bool, _a1 <-chan bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(chan<- bool, <-chan bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunExecution provides a mock function with given fields: ctx, execution
func (_m *Session) RunExecution(ctx context.Context, execution *entity.Execution) error {
	ret := _m.Called(ctx, execution)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Execution) error); ok {
		r0 = rf(ctx, execution)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: ctx
func (_m *Session) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSession interface {
	mock.TestingT
	Cleanup(func())
}

// NewSession creates a new instance of Session. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSession(t mockConstructorTestingTNewSession) *Session {
	mock := &Session{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
