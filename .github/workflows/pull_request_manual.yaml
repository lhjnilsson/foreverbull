name: Algo as Pytest

on:
  pull_request:
    branches: [main]

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v2

      - name: build python clients
        working-directory: ./external/client/python
        run: |
          docker build -t quay.io/foreverbull/zipline:latest -f zipline.Dockerfile .

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.20.4

      - name: Setup Compose Environment
        uses: isbang/compose-action@v1.4.1
        with:
          compose-file: "./docker-compose-dev.yaml"
        env:
          ALPACA_MARKETS_API_KEY: ${{ secrets.ALPACA_MARKETS_API_KEY }}
          ALPACA_MARKETS_API_SECRET: ${{ secrets.ALPACA_MARKETS_API_SECRET }}
          ALPACA_MARKETS_BASE_URL: ${{ secrets.ALPACA_MARKETS_BASE_URL }}

      - name: install ta-lib
        run: |
          wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
          tar -xzf ta-lib-0.4.0-src.tar.gz
          cd ta-lib/
          ./configure --prefix=/usr
          make
          sudo make install
          cd ..
          rm -rf ta-lib ta-lib-0.4.0-src.tar.gz

      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - -y
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install and Run
        working-directory: ./external/client/python
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-interaction --no-ansi
          poetry run foreverbull service create backtest_service quay.io/foreverbull/zipline:latest
          poetry run foreverbull backtest create test_backtest --backtest-service backtest_service --start 2023-01-01 --end 2023-04-30 --symbol AAPL --symbol MSFT --symbol NVDA --symbol GOOG
          poetry run pytest examples/ema -xvs
        env:
          THREADED_EXECUTION: "true"

      - name: Sleep for 20 seconds to make all containers stop
        run: sleep 20s
        shell: bash

      - name: Collect docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2
        with:
          dest: "./logs"
      - name: Tar logs
        if: failure()
        run: tar cvzf ./logs.tgz ./logs
      - name: Upload logs to GitHub
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: logs.tgz
          path: ./logs.tgz
