# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""


import grpc
from foreverbull.pb.backtest import backtest_pb2 as foreverbull_dot_pb_dot_backtest_dot_backtest__pb2

GRPC_GENERATED_VERSION = "1.66.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + " but the generated code in foreverbull/pb/backtest/engine_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class EngineStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ingest = channel.unary_unary(
            "/foreverbull.pb.backtest.Engine/Ingest",
            request_serializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.IngestRequest.SerializeToString,
            response_deserializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.IngestResponse.FromString,
            _registered_method=True,
        )
        self.Run = channel.unary_unary(
            "/foreverbull.pb.backtest.Engine/Run",
            request_serializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.RunRequest.SerializeToString,
            response_deserializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.RunResponse.FromString,
            _registered_method=True,
        )
        self.PlaceOrders = channel.unary_unary(
            "/foreverbull.pb.backtest.Engine/PlaceOrders",
            request_serializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.PlaceOrdersRequest.SerializeToString,
            response_deserializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.PlaceOrdersResponse.FromString,
            _registered_method=True,
        )
        self.GetNextPeriod = channel.unary_unary(
            "/foreverbull.pb.backtest.Engine/GetNextPeriod",
            request_serializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.GetNextPeriodRequest.SerializeToString,
            response_deserializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.GetNextPeriodResponse.FromString,
            _registered_method=True,
        )
        self.GetResult = channel.unary_unary(
            "/foreverbull.pb.backtest.Engine/GetResult",
            request_serializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.GetResultRequest.SerializeToString,
            response_deserializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.GetResultResponse.FromString,
            _registered_method=True,
        )
        self.Stop = channel.unary_unary(
            "/foreverbull.pb.backtest.Engine/Stop",
            request_serializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.StopRequest.SerializeToString,
            response_deserializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.StopResponse.FromString,
            _registered_method=True,
        )


class EngineServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ingest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Run(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PlaceOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNextPeriod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_EngineServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Ingest": grpc.unary_unary_rpc_method_handler(
            servicer.Ingest,
            request_deserializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.IngestRequest.FromString,
            response_serializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.IngestResponse.SerializeToString,
        ),
        "Run": grpc.unary_unary_rpc_method_handler(
            servicer.Run,
            request_deserializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.RunRequest.FromString,
            response_serializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.RunResponse.SerializeToString,
        ),
        "PlaceOrders": grpc.unary_unary_rpc_method_handler(
            servicer.PlaceOrders,
            request_deserializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.PlaceOrdersRequest.FromString,
            response_serializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.PlaceOrdersResponse.SerializeToString,
        ),
        "GetNextPeriod": grpc.unary_unary_rpc_method_handler(
            servicer.GetNextPeriod,
            request_deserializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.GetNextPeriodRequest.FromString,
            response_serializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.GetNextPeriodResponse.SerializeToString,
        ),
        "GetResult": grpc.unary_unary_rpc_method_handler(
            servicer.GetResult,
            request_deserializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.GetResultRequest.FromString,
            response_serializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.GetResultResponse.SerializeToString,
        ),
        "Stop": grpc.unary_unary_rpc_method_handler(
            servicer.Stop,
            request_deserializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.StopRequest.FromString,
            response_serializer=foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.StopResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("foreverbull.pb.backtest.Engine", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("foreverbull.pb.backtest.Engine", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class Engine(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ingest(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/foreverbull.pb.backtest.Engine/Ingest",
            foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.IngestRequest.SerializeToString,
            foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.IngestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Run(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/foreverbull.pb.backtest.Engine/Run",
            foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.RunRequest.SerializeToString,
            foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.RunResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def PlaceOrders(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/foreverbull.pb.backtest.Engine/PlaceOrders",
            foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.PlaceOrdersRequest.SerializeToString,
            foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.PlaceOrdersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetNextPeriod(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/foreverbull.pb.backtest.Engine/GetNextPeriod",
            foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.GetNextPeriodRequest.SerializeToString,
            foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.GetNextPeriodResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetResult(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/foreverbull.pb.backtest.Engine/GetResult",
            foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.GetResultRequest.SerializeToString,
            foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.GetResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Stop(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/foreverbull.pb.backtest.Engine/Stop",
            foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.StopRequest.SerializeToString,
            foreverbull_dot_pb_dot_backtest_dot_backtest__pb2.StopResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
