"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Period(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TIMESTAMP_FIELD_NUMBER: builtins.int
    PNL_FIELD_NUMBER: builtins.int
    RETURNS_FIELD_NUMBER: builtins.int
    PORTFOLIO_VALUE_FIELD_NUMBER: builtins.int
    LONGS_COUNT_FIELD_NUMBER: builtins.int
    SHORTS_COUNT_FIELD_NUMBER: builtins.int
    LONG_VALUE_FIELD_NUMBER: builtins.int
    SHORT_VALUE_FIELD_NUMBER: builtins.int
    STARTING_EXPOSURE_FIELD_NUMBER: builtins.int
    ENDING_EXPOSURE_FIELD_NUMBER: builtins.int
    LONG_EXPOSURE_FIELD_NUMBER: builtins.int
    SHORT_EXPOSURE_FIELD_NUMBER: builtins.int
    CAPITAL_USED_FIELD_NUMBER: builtins.int
    GROSS_LEVERAGE_FIELD_NUMBER: builtins.int
    NET_LEVERAGE_FIELD_NUMBER: builtins.int
    STARTING_VALUE_FIELD_NUMBER: builtins.int
    ENDING_VALUE_FIELD_NUMBER: builtins.int
    STARTING_CASH_FIELD_NUMBER: builtins.int
    ENDING_CASH_FIELD_NUMBER: builtins.int
    MAX_DRAWDOWN_FIELD_NUMBER: builtins.int
    MAX_LEVERAGE_FIELD_NUMBER: builtins.int
    EXCESS_RETURNS_FIELD_NUMBER: builtins.int
    TREASURY_PERIOD_RETURN_FIELD_NUMBER: builtins.int
    ALGORITHM_PERIOD_RETURN_FIELD_NUMBER: builtins.int
    ALGO_VOLATILITY_FIELD_NUMBER: builtins.int
    SHARPE_FIELD_NUMBER: builtins.int
    SORTINO_FIELD_NUMBER: builtins.int
    BENCHMARK_PERIOD_RETURNS_FIELD_NUMBER: builtins.int
    BENCHMARK_VOLATILITY_FIELD_NUMBER: builtins.int
    ALPHA_FIELD_NUMBER: builtins.int
    BETA_FIELD_NUMBER: builtins.int
    PNL: builtins.float
    returns: builtins.float
    portfolio_value: builtins.float
    longs_count: builtins.int
    shorts_count: builtins.int
    long_value: builtins.float
    short_value: builtins.float
    starting_exposure: builtins.float
    ending_exposure: builtins.float
    long_exposure: builtins.float
    short_exposure: builtins.float
    capital_used: builtins.float
    gross_leverage: builtins.float
    net_leverage: builtins.float
    starting_value: builtins.float
    ending_value: builtins.float
    starting_cash: builtins.float
    ending_cash: builtins.float
    max_drawdown: builtins.float
    max_leverage: builtins.float
    excess_returns: builtins.float
    treasury_period_return: builtins.float
    algorithm_period_return: builtins.float
    algo_volatility: builtins.float
    sharpe: builtins.float
    sortino: builtins.float
    benchmark_period_returns: builtins.float
    benchmark_volatility: builtins.float
    alpha: builtins.float
    beta: builtins.float
    @property
    def timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    def __init__(
        self,
        *,
        timestamp: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        PNL: builtins.float = ...,
        returns: builtins.float = ...,
        portfolio_value: builtins.float = ...,
        longs_count: builtins.int = ...,
        shorts_count: builtins.int = ...,
        long_value: builtins.float = ...,
        short_value: builtins.float = ...,
        starting_exposure: builtins.float = ...,
        ending_exposure: builtins.float = ...,
        long_exposure: builtins.float = ...,
        short_exposure: builtins.float = ...,
        capital_used: builtins.float = ...,
        gross_leverage: builtins.float = ...,
        net_leverage: builtins.float = ...,
        starting_value: builtins.float = ...,
        ending_value: builtins.float = ...,
        starting_cash: builtins.float = ...,
        ending_cash: builtins.float = ...,
        max_drawdown: builtins.float = ...,
        max_leverage: builtins.float = ...,
        excess_returns: builtins.float = ...,
        treasury_period_return: builtins.float = ...,
        algorithm_period_return: builtins.float = ...,
        algo_volatility: builtins.float | None = ...,
        sharpe: builtins.float | None = ...,
        sortino: builtins.float | None = ...,
        benchmark_period_returns: builtins.float | None = ...,
        benchmark_volatility: builtins.float | None = ...,
        alpha: builtins.float | None = ...,
        beta: builtins.float | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing.Literal[
            "_algo_volatility",
            b"_algo_volatility",
            "_alpha",
            b"_alpha",
            "_benchmark_period_returns",
            b"_benchmark_period_returns",
            "_benchmark_volatility",
            b"_benchmark_volatility",
            "_beta",
            b"_beta",
            "_sharpe",
            b"_sharpe",
            "_sortino",
            b"_sortino",
            "algo_volatility",
            b"algo_volatility",
            "alpha",
            b"alpha",
            "benchmark_period_returns",
            b"benchmark_period_returns",
            "benchmark_volatility",
            b"benchmark_volatility",
            "beta",
            b"beta",
            "sharpe",
            b"sharpe",
            "sortino",
            b"sortino",
            "timestamp",
            b"timestamp",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "PNL",
            b"PNL",
            "_algo_volatility",
            b"_algo_volatility",
            "_alpha",
            b"_alpha",
            "_benchmark_period_returns",
            b"_benchmark_period_returns",
            "_benchmark_volatility",
            b"_benchmark_volatility",
            "_beta",
            b"_beta",
            "_sharpe",
            b"_sharpe",
            "_sortino",
            b"_sortino",
            "algo_volatility",
            b"algo_volatility",
            "algorithm_period_return",
            b"algorithm_period_return",
            "alpha",
            b"alpha",
            "benchmark_period_returns",
            b"benchmark_period_returns",
            "benchmark_volatility",
            b"benchmark_volatility",
            "beta",
            b"beta",
            "capital_used",
            b"capital_used",
            "ending_cash",
            b"ending_cash",
            "ending_exposure",
            b"ending_exposure",
            "ending_value",
            b"ending_value",
            "excess_returns",
            b"excess_returns",
            "gross_leverage",
            b"gross_leverage",
            "long_exposure",
            b"long_exposure",
            "long_value",
            b"long_value",
            "longs_count",
            b"longs_count",
            "max_drawdown",
            b"max_drawdown",
            "max_leverage",
            b"max_leverage",
            "net_leverage",
            b"net_leverage",
            "portfolio_value",
            b"portfolio_value",
            "returns",
            b"returns",
            "sharpe",
            b"sharpe",
            "short_exposure",
            b"short_exposure",
            "short_value",
            b"short_value",
            "shorts_count",
            b"shorts_count",
            "sortino",
            b"sortino",
            "starting_cash",
            b"starting_cash",
            "starting_exposure",
            b"starting_exposure",
            "starting_value",
            b"starting_value",
            "timestamp",
            b"timestamp",
            "treasury_period_return",
            b"treasury_period_return",
        ],
    ) -> None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing.Literal["_algo_volatility", b"_algo_volatility"]
    ) -> typing.Literal["algo_volatility"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_alpha", b"_alpha"]) -> typing.Literal["alpha"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing.Literal["_benchmark_period_returns", b"_benchmark_period_returns"]
    ) -> typing.Literal["benchmark_period_returns"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing.Literal["_benchmark_volatility", b"_benchmark_volatility"]
    ) -> typing.Literal["benchmark_volatility"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_beta", b"_beta"]) -> typing.Literal["beta"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_sharpe", b"_sharpe"]) -> typing.Literal["sharpe"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_sortino", b"_sortino"]) -> typing.Literal["sortino"] | None: ...

global___Period = Period
