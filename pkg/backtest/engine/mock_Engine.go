// Code generated by mockery v2.46.3. DO NOT EDIT.

package engine

import (
	context "context"

	backtest "github.com/lhjnilsson/foreverbull/pkg/pb/backtest"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/lhjnilsson/foreverbull/internal/storage"
)

// MockEngine is an autogenerated mock type for the Engine type
type MockEngine struct {
	mock.Mock
}

// DownloadIngestion provides a mock function with given fields: ctx, object
func (_m *MockEngine) DownloadIngestion(ctx context.Context, object *storage.Object) error {
	ret := _m.Called(ctx, object)

	if len(ret) == 0 {
		panic("no return value specified for DownloadIngestion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *storage.Object) error); ok {
		r0 = rf(ctx, object)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ingest provides a mock function with given fields: ctx, ingestion, object
func (_m *MockEngine) Ingest(ctx context.Context, ingestion *backtest.Ingestion, object *storage.Object) error {
	ret := _m.Called(ctx, ingestion, object)

	if len(ret) == 0 {
		panic("no return value specified for Ingest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *backtest.Ingestion, *storage.Object) error); ok {
		r0 = rf(ctx, ingestion, object)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSession provides a mock function with given fields: ctx, session
func (_m *MockEngine) NewSession(ctx context.Context, session *backtest.Session) (EngineSession, error) {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for NewSession")
	}

	var r0 EngineSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backtest.Session) (EngineSession, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backtest.Session) EngineSession); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EngineSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backtest.Session) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockEngine creates a new instance of MockEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEngine {
	mock := &MockEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
