// Code generated by mockery v2.18.0. DO NOT EDIT.

package pb

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockIngestionServicerServer is an autogenerated mock type for the IngestionServicerServer type
type MockIngestionServicerServer struct {
	mock.Mock
}

// CreateIngestion provides a mock function with given fields: _a0, _a1
func (_m *MockIngestionServicerServer) CreateIngestion(_a0 context.Context, _a1 *CreateIngestionRequest) (*CreateIngestionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *CreateIngestionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CreateIngestionRequest) *CreateIngestionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateIngestionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CreateIngestionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentIngestion provides a mock function with given fields: _a0, _a1
func (_m *MockIngestionServicerServer) GetCurrentIngestion(_a0 context.Context, _a1 *GetCurrentIngestionRequest) (*GetCurrentIngestionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetCurrentIngestionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetCurrentIngestionRequest) *GetCurrentIngestionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetCurrentIngestionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetCurrentIngestionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedIngestionServicerServer provides a mock function with given fields:
func (_m *MockIngestionServicerServer) mustEmbedUnimplementedIngestionServicerServer() {
	_m.Called()
}

type mockConstructorTestingTNewMockIngestionServicerServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIngestionServicerServer creates a new instance of MockIngestionServicerServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIngestionServicerServer(t mockConstructorTestingTNewMockIngestionServicerServer) *MockIngestionServicerServer {
	mock := &MockIngestionServicerServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
