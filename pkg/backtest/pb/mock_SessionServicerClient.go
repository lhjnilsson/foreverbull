// Code generated by mockery v2.46.3. DO NOT EDIT.

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockSessionServicerClient is an autogenerated mock type for the SessionServicerClient type
type MockSessionServicerClient struct {
	mock.Mock
}

// CreateExecution provides a mock function with given fields: ctx, in, opts
func (_m *MockSessionServicerClient) CreateExecution(ctx context.Context, in *CreateExecutionRequest, opts ...grpc.CallOption) (*CreateExecutionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateExecution")
	}

	var r0 *CreateExecutionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateExecutionRequest, ...grpc.CallOption) (*CreateExecutionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateExecutionRequest, ...grpc.CallOption) *CreateExecutionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateExecutionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateExecutionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunExecution provides a mock function with given fields: ctx, in, opts
func (_m *MockSessionServicerClient) RunExecution(ctx context.Context, in *RunExecutionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RunExecutionResponse], error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RunExecution")
	}

	var r0 grpc.ServerStreamingClient[RunExecutionResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *RunExecutionRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[RunExecutionResponse], error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *RunExecutionRequest, ...grpc.CallOption) grpc.ServerStreamingClient[RunExecutionResponse]); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[RunExecutionResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *RunExecutionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopServer provides a mock function with given fields: ctx, in, opts
func (_m *MockSessionServicerClient) StopServer(ctx context.Context, in *StopServerRequest, opts ...grpc.CallOption) (*StopServerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopServer")
	}

	var r0 *StopServerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *StopServerRequest, ...grpc.CallOption) (*StopServerResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *StopServerRequest, ...grpc.CallOption) *StopServerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StopServerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *StopServerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockSessionServicerClient creates a new instance of MockSessionServicerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionServicerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionServicerClient {
	mock := &MockSessionServicerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
