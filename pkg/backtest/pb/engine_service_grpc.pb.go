// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: foreverbull/backtest/engine_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Engine_DownloadIngestion_FullMethodName      = "/foreverbull.backtest.Engine/DownloadIngestion"
	Engine_Ingest_FullMethodName                 = "/foreverbull.backtest.Engine/Ingest"
	Engine_RunBacktest_FullMethodName            = "/foreverbull.backtest.Engine/RunBacktest"
	Engine_GetCurrentPeriod_FullMethodName       = "/foreverbull.backtest.Engine/GetCurrentPeriod"
	Engine_PlaceOrdersAndContinue_FullMethodName = "/foreverbull.backtest.Engine/PlaceOrdersAndContinue"
	Engine_GetResult_FullMethodName              = "/foreverbull.backtest.Engine/GetResult"
	Engine_Stop_FullMethodName                   = "/foreverbull.backtest.Engine/Stop"
)

// EngineClient is the client API for Engine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EngineClient interface {
	DownloadIngestion(ctx context.Context, in *DownloadIngestionRequest, opts ...grpc.CallOption) (*DownloadIngestionResponse, error)
	Ingest(ctx context.Context, in *IngestRequest, opts ...grpc.CallOption) (*IngestResponse, error)
	RunBacktest(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error)
	GetCurrentPeriod(ctx context.Context, in *GetCurrentPeriodRequest, opts ...grpc.CallOption) (*GetCurrentPeriodResponse, error)
	PlaceOrdersAndContinue(ctx context.Context, in *PlaceOrdersAndContinueRequest, opts ...grpc.CallOption) (*PlaceOrdersAndContinueResponse, error)
	GetResult(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
}

type engineClient struct {
	cc grpc.ClientConnInterface
}

func NewEngineClient(cc grpc.ClientConnInterface) EngineClient {
	return &engineClient{cc}
}

func (c *engineClient) DownloadIngestion(ctx context.Context, in *DownloadIngestionRequest, opts ...grpc.CallOption) (*DownloadIngestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadIngestionResponse)
	err := c.cc.Invoke(ctx, Engine_DownloadIngestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) Ingest(ctx context.Context, in *IngestRequest, opts ...grpc.CallOption) (*IngestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestResponse)
	err := c.cc.Invoke(ctx, Engine_Ingest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) RunBacktest(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, Engine_RunBacktest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) GetCurrentPeriod(ctx context.Context, in *GetCurrentPeriodRequest, opts ...grpc.CallOption) (*GetCurrentPeriodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentPeriodResponse)
	err := c.cc.Invoke(ctx, Engine_GetCurrentPeriod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) PlaceOrdersAndContinue(ctx context.Context, in *PlaceOrdersAndContinueRequest, opts ...grpc.CallOption) (*PlaceOrdersAndContinueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlaceOrdersAndContinueResponse)
	err := c.cc.Invoke(ctx, Engine_PlaceOrdersAndContinue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) GetResult(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResultResponse)
	err := c.cc.Invoke(ctx, Engine_GetResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, Engine_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineServer is the server API for Engine service.
// All implementations must embed UnimplementedEngineServer
// for forward compatibility.
type EngineServer interface {
	DownloadIngestion(context.Context, *DownloadIngestionRequest) (*DownloadIngestionResponse, error)
	Ingest(context.Context, *IngestRequest) (*IngestResponse, error)
	RunBacktest(context.Context, *RunRequest) (*RunResponse, error)
	GetCurrentPeriod(context.Context, *GetCurrentPeriodRequest) (*GetCurrentPeriodResponse, error)
	PlaceOrdersAndContinue(context.Context, *PlaceOrdersAndContinueRequest) (*PlaceOrdersAndContinueResponse, error)
	GetResult(context.Context, *GetResultRequest) (*GetResultResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	mustEmbedUnimplementedEngineServer()
}

// UnimplementedEngineServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEngineServer struct{}

func (UnimplementedEngineServer) DownloadIngestion(context.Context, *DownloadIngestionRequest) (*DownloadIngestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadIngestion not implemented")
}
func (UnimplementedEngineServer) Ingest(context.Context, *IngestRequest) (*IngestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ingest not implemented")
}
func (UnimplementedEngineServer) RunBacktest(context.Context, *RunRequest) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunBacktest not implemented")
}
func (UnimplementedEngineServer) GetCurrentPeriod(context.Context, *GetCurrentPeriodRequest) (*GetCurrentPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentPeriod not implemented")
}
func (UnimplementedEngineServer) PlaceOrdersAndContinue(context.Context, *PlaceOrdersAndContinueRequest) (*PlaceOrdersAndContinueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrdersAndContinue not implemented")
}
func (UnimplementedEngineServer) GetResult(context.Context, *GetResultRequest) (*GetResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedEngineServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedEngineServer) mustEmbedUnimplementedEngineServer() {}
func (UnimplementedEngineServer) testEmbeddedByValue()                {}

// UnsafeEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EngineServer will
// result in compilation errors.
type UnsafeEngineServer interface {
	mustEmbedUnimplementedEngineServer()
}

func RegisterEngineServer(s grpc.ServiceRegistrar, srv EngineServer) {
	// If the following call pancis, it indicates UnimplementedEngineServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Engine_ServiceDesc, srv)
}

func _Engine_DownloadIngestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadIngestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).DownloadIngestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Engine_DownloadIngestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).DownloadIngestion(ctx, req.(*DownloadIngestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_Ingest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).Ingest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Engine_Ingest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).Ingest(ctx, req.(*IngestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_RunBacktest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).RunBacktest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Engine_RunBacktest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).RunBacktest(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_GetCurrentPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).GetCurrentPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Engine_GetCurrentPeriod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).GetCurrentPeriod(ctx, req.(*GetCurrentPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_PlaceOrdersAndContinue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrdersAndContinueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).PlaceOrdersAndContinue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Engine_PlaceOrdersAndContinue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).PlaceOrdersAndContinue(ctx, req.(*PlaceOrdersAndContinueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Engine_GetResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).GetResult(ctx, req.(*GetResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Engine_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Engine_ServiceDesc is the grpc.ServiceDesc for Engine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Engine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "foreverbull.backtest.Engine",
	HandlerType: (*EngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadIngestion",
			Handler:    _Engine_DownloadIngestion_Handler,
		},
		{
			MethodName: "Ingest",
			Handler:    _Engine_Ingest_Handler,
		},
		{
			MethodName: "RunBacktest",
			Handler:    _Engine_RunBacktest_Handler,
		},
		{
			MethodName: "GetCurrentPeriod",
			Handler:    _Engine_GetCurrentPeriod_Handler,
		},
		{
			MethodName: "PlaceOrdersAndContinue",
			Handler:    _Engine_PlaceOrdersAndContinue_Handler,
		},
		{
			MethodName: "GetResult",
			Handler:    _Engine_GetResult_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Engine_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "foreverbull/backtest/engine_service.proto",
}
