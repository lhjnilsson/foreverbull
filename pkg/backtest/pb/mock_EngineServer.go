// Code generated by mockery v2.50.1. DO NOT EDIT.

package pb

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockEngineServer is an autogenerated mock type for the EngineServer type
type MockEngineServer struct {
	mock.Mock
}

// DownloadIngestion provides a mock function with given fields: _a0, _a1
func (_m *MockEngineServer) DownloadIngestion(_a0 context.Context, _a1 *DownloadIngestionRequest) (*DownloadIngestionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DownloadIngestion")
	}

	var r0 *DownloadIngestionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *DownloadIngestionRequest) (*DownloadIngestionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *DownloadIngestionRequest) *DownloadIngestionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DownloadIngestionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *DownloadIngestionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIngestion provides a mock function with given fields: _a0, _a1
func (_m *MockEngineServer) GetIngestion(_a0 context.Context, _a1 *GetIngestionRequest) (*GetIngestionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetIngestion")
	}

	var r0 *GetIngestionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetIngestionRequest) (*GetIngestionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetIngestionRequest) *GetIngestionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetIngestionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetIngestionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ingest provides a mock function with given fields: _a0, _a1
func (_m *MockEngineServer) Ingest(_a0 context.Context, _a1 *IngestRequest) (*IngestResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Ingest")
	}

	var r0 *IngestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *IngestRequest) (*IngestResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *IngestRequest) *IngestResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IngestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *IngestRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSession provides a mock function with given fields: _a0, _a1
func (_m *MockEngineServer) NewSession(_a0 context.Context, _a1 *NewSessionRequest) (*NewSessionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for NewSession")
	}

	var r0 *NewSessionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *NewSessionRequest) (*NewSessionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *NewSessionRequest) *NewSessionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NewSessionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *NewSessionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedEngineServer provides a mock function with no fields
func (_m *MockEngineServer) mustEmbedUnimplementedEngineServer() {
	_m.Called()
}

// NewMockEngineServer creates a new instance of MockEngineServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEngineServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEngineServer {
	mock := &MockEngineServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
