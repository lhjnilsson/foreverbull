// Code generated by mockery v2.50.1. DO NOT EDIT.

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockEngineClient is an autogenerated mock type for the EngineClient type
type MockEngineClient struct {
	mock.Mock
}

// DownloadIngestion provides a mock function with given fields: ctx, in, opts
func (_m *MockEngineClient) DownloadIngestion(ctx context.Context, in *DownloadIngestionRequest, opts ...grpc.CallOption) (*DownloadIngestionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DownloadIngestion")
	}

	var r0 *DownloadIngestionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *DownloadIngestionRequest, ...grpc.CallOption) (*DownloadIngestionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *DownloadIngestionRequest, ...grpc.CallOption) *DownloadIngestionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DownloadIngestionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *DownloadIngestionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIngestion provides a mock function with given fields: ctx, in, opts
func (_m *MockEngineClient) GetIngestion(ctx context.Context, in *GetIngestionRequest, opts ...grpc.CallOption) (*GetIngestionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIngestion")
	}

	var r0 *GetIngestionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetIngestionRequest, ...grpc.CallOption) (*GetIngestionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetIngestionRequest, ...grpc.CallOption) *GetIngestionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetIngestionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetIngestionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ingest provides a mock function with given fields: ctx, in, opts
func (_m *MockEngineClient) Ingest(ctx context.Context, in *IngestRequest, opts ...grpc.CallOption) (*IngestResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Ingest")
	}

	var r0 *IngestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *IngestRequest, ...grpc.CallOption) (*IngestResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *IngestRequest, ...grpc.CallOption) *IngestResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IngestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *IngestRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSession provides a mock function with given fields: ctx, in, opts
func (_m *MockEngineClient) NewSession(ctx context.Context, in *NewSessionRequest, opts ...grpc.CallOption) (*NewSessionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NewSession")
	}

	var r0 *NewSessionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *NewSessionRequest, ...grpc.CallOption) (*NewSessionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *NewSessionRequest, ...grpc.CallOption) *NewSessionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NewSessionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *NewSessionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockEngineClient creates a new instance of MockEngineClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEngineClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEngineClient {
	mock := &MockEngineClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
