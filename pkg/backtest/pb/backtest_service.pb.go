// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: foreverbull/backtest/backtest_service.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListBacktestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBacktestsRequest) Reset() {
	*x = ListBacktestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_backtest_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBacktestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBacktestsRequest) ProtoMessage() {}

func (x *ListBacktestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_backtest_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBacktestsRequest.ProtoReflect.Descriptor instead.
func (*ListBacktestsRequest) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_backtest_service_proto_rawDescGZIP(), []int{0}
}

type ListBacktestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backtests []*Backtest `protobuf:"bytes,1,rep,name=backtests,proto3" json:"backtests,omitempty"`
}

func (x *ListBacktestsResponse) Reset() {
	*x = ListBacktestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_backtest_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBacktestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBacktestsResponse) ProtoMessage() {}

func (x *ListBacktestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_backtest_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBacktestsResponse.ProtoReflect.Descriptor instead.
func (*ListBacktestsResponse) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_backtest_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListBacktestsResponse) GetBacktests() []*Backtest {
	if x != nil {
		return x.Backtests
	}
	return nil
}

type CreateBacktestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backtest *Backtest `protobuf:"bytes,1,opt,name=backtest,proto3" json:"backtest,omitempty"`
}

func (x *CreateBacktestRequest) Reset() {
	*x = CreateBacktestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_backtest_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBacktestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBacktestRequest) ProtoMessage() {}

func (x *CreateBacktestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_backtest_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBacktestRequest.ProtoReflect.Descriptor instead.
func (*CreateBacktestRequest) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_backtest_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateBacktestRequest) GetBacktest() *Backtest {
	if x != nil {
		return x.Backtest
	}
	return nil
}

type CreateBacktestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backtest *Backtest `protobuf:"bytes,1,opt,name=backtest,proto3" json:"backtest,omitempty"`
}

func (x *CreateBacktestResponse) Reset() {
	*x = CreateBacktestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_backtest_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBacktestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBacktestResponse) ProtoMessage() {}

func (x *CreateBacktestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_backtest_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBacktestResponse.ProtoReflect.Descriptor instead.
func (*CreateBacktestResponse) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_backtest_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateBacktestResponse) GetBacktest() *Backtest {
	if x != nil {
		return x.Backtest
	}
	return nil
}

type GetBacktestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetBacktestRequest) Reset() {
	*x = GetBacktestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_backtest_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBacktestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBacktestRequest) ProtoMessage() {}

func (x *GetBacktestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_backtest_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBacktestRequest.ProtoReflect.Descriptor instead.
func (*GetBacktestRequest) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_backtest_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetBacktestRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetBacktestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Backtest *Backtest `protobuf:"bytes,2,opt,name=backtest,proto3" json:"backtest,omitempty"`
}

func (x *GetBacktestResponse) Reset() {
	*x = GetBacktestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_backtest_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBacktestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBacktestResponse) ProtoMessage() {}

func (x *GetBacktestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_backtest_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBacktestResponse.ProtoReflect.Descriptor instead.
func (*GetBacktestResponse) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_backtest_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetBacktestResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetBacktestResponse) GetBacktest() *Backtest {
	if x != nil {
		return x.Backtest
	}
	return nil
}

type CreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BacktestName string `protobuf:"bytes,1,opt,name=backtest_name,json=backtestName,proto3" json:"backtest_name,omitempty"`
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_backtest_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_backtest_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_backtest_service_proto_rawDescGZIP(), []int{6}
}

func (x *CreateSessionRequest) GetBacktestName() string {
	if x != nil {
		return x.BacktestName
	}
	return ""
}

type CreateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_backtest_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_backtest_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_backtest_service_proto_rawDescGZIP(), []int{7}
}

func (x *CreateSessionResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type GetSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *GetSessionRequest) Reset() {
	*x = GetSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_backtest_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionRequest) ProtoMessage() {}

func (x *GetSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_backtest_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionRequest.ProtoReflect.Descriptor instead.
func (*GetSessionRequest) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_backtest_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type GetSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *GetSessionResponse) Reset() {
	*x = GetSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_backtest_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionResponse) ProtoMessage() {}

func (x *GetSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_backtest_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionResponse.ProtoReflect.Descriptor instead.
func (*GetSessionResponse) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_backtest_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetSessionResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

var File_foreverbull_backtest_backtest_service_proto protoreflect.FileDescriptor

var file_foreverbull_backtest_backtest_service_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2f, 0x62, 0x61,
	0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x66,
	0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c,
	0x2f, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x16, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x09, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74,
	0x22, 0x54, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x62, 0x61,
	0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66,
	0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x52, 0x08, 0x62, 0x61,
	0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x22, 0x28, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63,
	0x6b, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x65, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x62,
	0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x52, 0x08, 0x62,
	0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0xa2, 0x04, 0x0a, 0x10, 0x42, 0x61,
	0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x12, 0x6a,
	0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x2a, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x66, 0x6f,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x66,
	0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x66, 0x6f, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63,
	0x6b, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6a, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x66,
	0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x66, 0x6f, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x33,
	0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x68, 0x6a,
	0x6e, 0x69, 0x6c, 0x73, 0x73, 0x6f, 0x6e, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62,
	0x75, 0x6c, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_foreverbull_backtest_backtest_service_proto_rawDescOnce sync.Once
	file_foreverbull_backtest_backtest_service_proto_rawDescData = file_foreverbull_backtest_backtest_service_proto_rawDesc
)

func file_foreverbull_backtest_backtest_service_proto_rawDescGZIP() []byte {
	file_foreverbull_backtest_backtest_service_proto_rawDescOnce.Do(func() {
		file_foreverbull_backtest_backtest_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_foreverbull_backtest_backtest_service_proto_rawDescData)
	})
	return file_foreverbull_backtest_backtest_service_proto_rawDescData
}

var file_foreverbull_backtest_backtest_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_foreverbull_backtest_backtest_service_proto_goTypes = []any{
	(*ListBacktestsRequest)(nil),   // 0: foreverbull.backtest.ListBacktestsRequest
	(*ListBacktestsResponse)(nil),  // 1: foreverbull.backtest.ListBacktestsResponse
	(*CreateBacktestRequest)(nil),  // 2: foreverbull.backtest.CreateBacktestRequest
	(*CreateBacktestResponse)(nil), // 3: foreverbull.backtest.CreateBacktestResponse
	(*GetBacktestRequest)(nil),     // 4: foreverbull.backtest.GetBacktestRequest
	(*GetBacktestResponse)(nil),    // 5: foreverbull.backtest.GetBacktestResponse
	(*CreateSessionRequest)(nil),   // 6: foreverbull.backtest.CreateSessionRequest
	(*CreateSessionResponse)(nil),  // 7: foreverbull.backtest.CreateSessionResponse
	(*GetSessionRequest)(nil),      // 8: foreverbull.backtest.GetSessionRequest
	(*GetSessionResponse)(nil),     // 9: foreverbull.backtest.GetSessionResponse
	(*Backtest)(nil),               // 10: foreverbull.backtest.Backtest
	(*Session)(nil),                // 11: foreverbull.backtest.Session
}
var file_foreverbull_backtest_backtest_service_proto_depIdxs = []int32{
	10, // 0: foreverbull.backtest.ListBacktestsResponse.backtests:type_name -> foreverbull.backtest.Backtest
	10, // 1: foreverbull.backtest.CreateBacktestRequest.backtest:type_name -> foreverbull.backtest.Backtest
	10, // 2: foreverbull.backtest.CreateBacktestResponse.backtest:type_name -> foreverbull.backtest.Backtest
	10, // 3: foreverbull.backtest.GetBacktestResponse.backtest:type_name -> foreverbull.backtest.Backtest
	11, // 4: foreverbull.backtest.CreateSessionResponse.session:type_name -> foreverbull.backtest.Session
	11, // 5: foreverbull.backtest.GetSessionResponse.session:type_name -> foreverbull.backtest.Session
	0,  // 6: foreverbull.backtest.BacktestServicer.ListBacktests:input_type -> foreverbull.backtest.ListBacktestsRequest
	2,  // 7: foreverbull.backtest.BacktestServicer.CreateBacktest:input_type -> foreverbull.backtest.CreateBacktestRequest
	4,  // 8: foreverbull.backtest.BacktestServicer.GetBacktest:input_type -> foreverbull.backtest.GetBacktestRequest
	6,  // 9: foreverbull.backtest.BacktestServicer.CreateSession:input_type -> foreverbull.backtest.CreateSessionRequest
	8,  // 10: foreverbull.backtest.BacktestServicer.GetSession:input_type -> foreverbull.backtest.GetSessionRequest
	1,  // 11: foreverbull.backtest.BacktestServicer.ListBacktests:output_type -> foreverbull.backtest.ListBacktestsResponse
	3,  // 12: foreverbull.backtest.BacktestServicer.CreateBacktest:output_type -> foreverbull.backtest.CreateBacktestResponse
	5,  // 13: foreverbull.backtest.BacktestServicer.GetBacktest:output_type -> foreverbull.backtest.GetBacktestResponse
	7,  // 14: foreverbull.backtest.BacktestServicer.CreateSession:output_type -> foreverbull.backtest.CreateSessionResponse
	9,  // 15: foreverbull.backtest.BacktestServicer.GetSession:output_type -> foreverbull.backtest.GetSessionResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_foreverbull_backtest_backtest_service_proto_init() }
func file_foreverbull_backtest_backtest_service_proto_init() {
	if File_foreverbull_backtest_backtest_service_proto != nil {
		return
	}
	file_foreverbull_backtest_backtest_proto_init()
	file_foreverbull_backtest_session_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_foreverbull_backtest_backtest_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ListBacktestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_backtest_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListBacktestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_backtest_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CreateBacktestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_backtest_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CreateBacktestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_backtest_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetBacktestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_backtest_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetBacktestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_backtest_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CreateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_backtest_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CreateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_backtest_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_backtest_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_foreverbull_backtest_backtest_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_foreverbull_backtest_backtest_service_proto_goTypes,
		DependencyIndexes: file_foreverbull_backtest_backtest_service_proto_depIdxs,
		MessageInfos:      file_foreverbull_backtest_backtest_service_proto_msgTypes,
	}.Build()
	File_foreverbull_backtest_backtest_service_proto = out.File
	file_foreverbull_backtest_backtest_service_proto_rawDesc = nil
	file_foreverbull_backtest_backtest_service_proto_goTypes = nil
	file_foreverbull_backtest_backtest_service_proto_depIdxs = nil
}
