// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: foreverbull/backtest/backtest_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BacktestServicer_ListBacktests_FullMethodName  = "/foreverbull.backtest.BacktestServicer/ListBacktests"
	BacktestServicer_CreateBacktest_FullMethodName = "/foreverbull.backtest.BacktestServicer/CreateBacktest"
	BacktestServicer_GetBacktest_FullMethodName    = "/foreverbull.backtest.BacktestServicer/GetBacktest"
	BacktestServicer_CreateSession_FullMethodName  = "/foreverbull.backtest.BacktestServicer/CreateSession"
	BacktestServicer_GetSession_FullMethodName     = "/foreverbull.backtest.BacktestServicer/GetSession"
	BacktestServicer_ListExecutions_FullMethodName = "/foreverbull.backtest.BacktestServicer/ListExecutions"
	BacktestServicer_GetExecution_FullMethodName   = "/foreverbull.backtest.BacktestServicer/GetExecution"
)

// BacktestServicerClient is the client API for BacktestServicer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BacktestServicerClient interface {
	ListBacktests(ctx context.Context, in *ListBacktestsRequest, opts ...grpc.CallOption) (*ListBacktestsResponse, error)
	CreateBacktest(ctx context.Context, in *CreateBacktestRequest, opts ...grpc.CallOption) (*CreateBacktestResponse, error)
	GetBacktest(ctx context.Context, in *GetBacktestRequest, opts ...grpc.CallOption) (*GetBacktestResponse, error)
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error)
	ListExecutions(ctx context.Context, in *ListExecutionsRequest, opts ...grpc.CallOption) (*ListExecutionsResponse, error)
	GetExecution(ctx context.Context, in *GetExecutionRequest, opts ...grpc.CallOption) (*GetExecutionResponse, error)
}

type backtestServicerClient struct {
	cc grpc.ClientConnInterface
}

func NewBacktestServicerClient(cc grpc.ClientConnInterface) BacktestServicerClient {
	return &backtestServicerClient{cc}
}

func (c *backtestServicerClient) ListBacktests(ctx context.Context, in *ListBacktestsRequest, opts ...grpc.CallOption) (*ListBacktestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBacktestsResponse)
	err := c.cc.Invoke(ctx, BacktestServicer_ListBacktests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backtestServicerClient) CreateBacktest(ctx context.Context, in *CreateBacktestRequest, opts ...grpc.CallOption) (*CreateBacktestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBacktestResponse)
	err := c.cc.Invoke(ctx, BacktestServicer_CreateBacktest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backtestServicerClient) GetBacktest(ctx context.Context, in *GetBacktestRequest, opts ...grpc.CallOption) (*GetBacktestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBacktestResponse)
	err := c.cc.Invoke(ctx, BacktestServicer_GetBacktest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backtestServicerClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, BacktestServicer_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backtestServicerClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionResponse)
	err := c.cc.Invoke(ctx, BacktestServicer_GetSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backtestServicerClient) ListExecutions(ctx context.Context, in *ListExecutionsRequest, opts ...grpc.CallOption) (*ListExecutionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExecutionsResponse)
	err := c.cc.Invoke(ctx, BacktestServicer_ListExecutions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backtestServicerClient) GetExecution(ctx context.Context, in *GetExecutionRequest, opts ...grpc.CallOption) (*GetExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExecutionResponse)
	err := c.cc.Invoke(ctx, BacktestServicer_GetExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BacktestServicerServer is the server API for BacktestServicer service.
// All implementations must embed UnimplementedBacktestServicerServer
// for forward compatibility.
type BacktestServicerServer interface {
	ListBacktests(context.Context, *ListBacktestsRequest) (*ListBacktestsResponse, error)
	CreateBacktest(context.Context, *CreateBacktestRequest) (*CreateBacktestResponse, error)
	GetBacktest(context.Context, *GetBacktestRequest) (*GetBacktestResponse, error)
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error)
	ListExecutions(context.Context, *ListExecutionsRequest) (*ListExecutionsResponse, error)
	GetExecution(context.Context, *GetExecutionRequest) (*GetExecutionResponse, error)
	mustEmbedUnimplementedBacktestServicerServer()
}

// UnimplementedBacktestServicerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBacktestServicerServer struct{}

func (UnimplementedBacktestServicerServer) ListBacktests(context.Context, *ListBacktestsRequest) (*ListBacktestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBacktests not implemented")
}
func (UnimplementedBacktestServicerServer) CreateBacktest(context.Context, *CreateBacktestRequest) (*CreateBacktestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBacktest not implemented")
}
func (UnimplementedBacktestServicerServer) GetBacktest(context.Context, *GetBacktestRequest) (*GetBacktestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBacktest not implemented")
}
func (UnimplementedBacktestServicerServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedBacktestServicerServer) GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedBacktestServicerServer) ListExecutions(context.Context, *ListExecutionsRequest) (*ListExecutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExecutions not implemented")
}
func (UnimplementedBacktestServicerServer) GetExecution(context.Context, *GetExecutionRequest) (*GetExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecution not implemented")
}
func (UnimplementedBacktestServicerServer) mustEmbedUnimplementedBacktestServicerServer() {}
func (UnimplementedBacktestServicerServer) testEmbeddedByValue()                          {}

// UnsafeBacktestServicerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BacktestServicerServer will
// result in compilation errors.
type UnsafeBacktestServicerServer interface {
	mustEmbedUnimplementedBacktestServicerServer()
}

func RegisterBacktestServicerServer(s grpc.ServiceRegistrar, srv BacktestServicerServer) {
	// If the following call pancis, it indicates UnimplementedBacktestServicerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BacktestServicer_ServiceDesc, srv)
}

func _BacktestServicer_ListBacktests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBacktestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacktestServicerServer).ListBacktests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BacktestServicer_ListBacktests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacktestServicerServer).ListBacktests(ctx, req.(*ListBacktestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BacktestServicer_CreateBacktest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBacktestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacktestServicerServer).CreateBacktest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BacktestServicer_CreateBacktest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacktestServicerServer).CreateBacktest(ctx, req.(*CreateBacktestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BacktestServicer_GetBacktest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBacktestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacktestServicerServer).GetBacktest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BacktestServicer_GetBacktest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacktestServicerServer).GetBacktest(ctx, req.(*GetBacktestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BacktestServicer_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacktestServicerServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BacktestServicer_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacktestServicerServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BacktestServicer_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacktestServicerServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BacktestServicer_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacktestServicerServer).GetSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BacktestServicer_ListExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacktestServicerServer).ListExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BacktestServicer_ListExecutions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacktestServicerServer).ListExecutions(ctx, req.(*ListExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BacktestServicer_GetExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacktestServicerServer).GetExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BacktestServicer_GetExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacktestServicerServer).GetExecution(ctx, req.(*GetExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BacktestServicer_ServiceDesc is the grpc.ServiceDesc for BacktestServicer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BacktestServicer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "foreverbull.backtest.BacktestServicer",
	HandlerType: (*BacktestServicerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBacktests",
			Handler:    _BacktestServicer_ListBacktests_Handler,
		},
		{
			MethodName: "CreateBacktest",
			Handler:    _BacktestServicer_CreateBacktest_Handler,
		},
		{
			MethodName: "GetBacktest",
			Handler:    _BacktestServicer_GetBacktest_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _BacktestServicer_CreateSession_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _BacktestServicer_GetSession_Handler,
		},
		{
			MethodName: "ListExecutions",
			Handler:    _BacktestServicer_ListExecutions_Handler,
		},
		{
			MethodName: "GetExecution",
			Handler:    _BacktestServicer_GetExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "foreverbull/backtest/backtest_service.proto",
}
