// Code generated by mockery v2.46.3. DO NOT EDIT.

package finance

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockTradingClient is an autogenerated mock type for the TradingClient type
type MockTradingClient struct {
	mock.Mock
}

// GetOrders provides a mock function with given fields: ctx, in, opts
func (_m *MockTradingClient) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 *GetOrdersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetOrdersRequest, ...grpc.CallOption) (*GetOrdersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetOrdersRequest, ...grpc.CallOption) *GetOrdersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetOrdersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetOrdersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPortfolio provides a mock function with given fields: ctx, in, opts
func (_m *MockTradingClient) GetPortfolio(ctx context.Context, in *GetPortfolioRequest, opts ...grpc.CallOption) (*GetPortfolioResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPortfolio")
	}

	var r0 *GetPortfolioResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetPortfolioRequest, ...grpc.CallOption) (*GetPortfolioResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetPortfolioRequest, ...grpc.CallOption) *GetPortfolioResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetPortfolioResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetPortfolioRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaceOrder provides a mock function with given fields: ctx, in, opts
func (_m *MockTradingClient) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PlaceOrder")
	}

	var r0 *PlaceOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *PlaceOrderRequest, ...grpc.CallOption) (*PlaceOrderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *PlaceOrderRequest, ...grpc.CallOption) *PlaceOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PlaceOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *PlaceOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockTradingClient creates a new instance of MockTradingClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTradingClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTradingClient {
	mock := &MockTradingClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
