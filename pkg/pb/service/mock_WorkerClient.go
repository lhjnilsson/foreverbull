// Code generated by mockery v2.46.3. DO NOT EDIT.

package service

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockWorkerClient is an autogenerated mock type for the WorkerClient type
type MockWorkerClient struct {
	mock.Mock
}

// ConfigureExecution provides a mock function with given fields: ctx, in, opts
func (_m *MockWorkerClient) ConfigureExecution(ctx context.Context, in *ConfigureExecutionRequest, opts ...grpc.CallOption) (*ConfigureExecutionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfigureExecution")
	}

	var r0 *ConfigureExecutionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ConfigureExecutionRequest, ...grpc.CallOption) (*ConfigureExecutionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ConfigureExecutionRequest, ...grpc.CallOption) *ConfigureExecutionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ConfigureExecutionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ConfigureExecutionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceInfo provides a mock function with given fields: ctx, in, opts
func (_m *MockWorkerClient) GetServiceInfo(ctx context.Context, in *GetServiceInfoRequest, opts ...grpc.CallOption) (*GetServiceInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceInfo")
	}

	var r0 *GetServiceInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetServiceInfoRequest, ...grpc.CallOption) (*GetServiceInfoResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetServiceInfoRequest, ...grpc.CallOption) *GetServiceInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetServiceInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetServiceInfoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunExecution provides a mock function with given fields: ctx, in, opts
func (_m *MockWorkerClient) RunExecution(ctx context.Context, in *RunExecutionRequest, opts ...grpc.CallOption) (*RunExecutionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RunExecution")
	}

	var r0 *RunExecutionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *RunExecutionRequest, ...grpc.CallOption) (*RunExecutionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *RunExecutionRequest, ...grpc.CallOption) *RunExecutionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RunExecutionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *RunExecutionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockWorkerClient creates a new instance of MockWorkerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkerClient {
	mock := &MockWorkerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
