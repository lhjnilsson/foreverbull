// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: foreverbull/backtest/engine_service.proto

package backtest

import (
	finance "github.com/lhjnilsson/foreverbull/pkg/pb/finance"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetIngestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetIngestionRequest) Reset() {
	*x = GetIngestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIngestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIngestionRequest) ProtoMessage() {}

func (x *GetIngestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIngestionRequest.ProtoReflect.Descriptor instead.
func (*GetIngestionRequest) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_engine_service_proto_rawDescGZIP(), []int{0}
}

type GetIngestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ingestion *Ingestion `protobuf:"bytes,1,opt,name=ingestion,proto3" json:"ingestion,omitempty"`
}

func (x *GetIngestionResponse) Reset() {
	*x = GetIngestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIngestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIngestionResponse) ProtoMessage() {}

func (x *GetIngestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIngestionResponse.ProtoReflect.Descriptor instead.
func (*GetIngestionResponse) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_engine_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetIngestionResponse) GetIngestion() *Ingestion {
	if x != nil {
		return x.Ingestion
	}
	return nil
}

type DownloadIngestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Object string `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *DownloadIngestionRequest) Reset() {
	*x = DownloadIngestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadIngestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadIngestionRequest) ProtoMessage() {}

func (x *DownloadIngestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadIngestionRequest.ProtoReflect.Descriptor instead.
func (*DownloadIngestionRequest) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_engine_service_proto_rawDescGZIP(), []int{2}
}

func (x *DownloadIngestionRequest) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *DownloadIngestionRequest) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

type DownloadIngestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ingestion *Ingestion `protobuf:"bytes,1,opt,name=ingestion,proto3" json:"ingestion,omitempty"`
}

func (x *DownloadIngestionResponse) Reset() {
	*x = DownloadIngestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadIngestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadIngestionResponse) ProtoMessage() {}

func (x *DownloadIngestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadIngestionResponse.ProtoReflect.Descriptor instead.
func (*DownloadIngestionResponse) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_engine_service_proto_rawDescGZIP(), []int{3}
}

func (x *DownloadIngestionResponse) GetIngestion() *Ingestion {
	if x != nil {
		return x.Ingestion
	}
	return nil
}

type IngestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ingestion *Ingestion `protobuf:"bytes,1,opt,name=ingestion,proto3" json:"ingestion,omitempty"`
	Bucket    *string    `protobuf:"bytes,2,opt,name=bucket,proto3,oneof" json:"bucket,omitempty"`
	Object    *string    `protobuf:"bytes,3,opt,name=object,proto3,oneof" json:"object,omitempty"`
}

func (x *IngestRequest) Reset() {
	*x = IngestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestRequest) ProtoMessage() {}

func (x *IngestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestRequest.ProtoReflect.Descriptor instead.
func (*IngestRequest) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_engine_service_proto_rawDescGZIP(), []int{4}
}

func (x *IngestRequest) GetIngestion() *Ingestion {
	if x != nil {
		return x.Ingestion
	}
	return nil
}

func (x *IngestRequest) GetBucket() string {
	if x != nil && x.Bucket != nil {
		return *x.Bucket
	}
	return ""
}

func (x *IngestRequest) GetObject() string {
	if x != nil && x.Object != nil {
		return *x.Object
	}
	return ""
}

type IngestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IngestResponse) Reset() {
	*x = IngestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestResponse) ProtoMessage() {}

func (x *IngestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestResponse.ProtoReflect.Descriptor instead.
func (*IngestResponse) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_engine_service_proto_rawDescGZIP(), []int{5}
}

type NewSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NewSessionRequest) Reset() {
	*x = NewSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSessionRequest) ProtoMessage() {}

func (x *NewSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSessionRequest.ProtoReflect.Descriptor instead.
func (*NewSessionRequest) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_engine_service_proto_rawDescGZIP(), []int{6}
}

func (x *NewSessionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type NewSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port int64 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *NewSessionResponse) Reset() {
	*x = NewSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSessionResponse) ProtoMessage() {}

func (x *NewSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSessionResponse.ProtoReflect.Descriptor instead.
func (*NewSessionResponse) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_engine_service_proto_rawDescGZIP(), []int{7}
}

func (x *NewSessionResponse) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

type RunBacktestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backtest *Backtest `protobuf:"bytes,1,opt,name=backtest,proto3" json:"backtest,omitempty"`
}

func (x *RunBacktestRequest) Reset() {
	*x = RunBacktestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunBacktestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunBacktestRequest) ProtoMessage() {}

func (x *RunBacktestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunBacktestRequest.ProtoReflect.Descriptor instead.
func (*RunBacktestRequest) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_engine_service_proto_rawDescGZIP(), []int{8}
}

func (x *RunBacktestRequest) GetBacktest() *Backtest {
	if x != nil {
		return x.Backtest
	}
	return nil
}

type RunBacktestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backtest *Backtest `protobuf:"bytes,1,opt,name=backtest,proto3" json:"backtest,omitempty"`
}

func (x *RunBacktestResponse) Reset() {
	*x = RunBacktestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunBacktestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunBacktestResponse) ProtoMessage() {}

func (x *RunBacktestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunBacktestResponse.ProtoReflect.Descriptor instead.
func (*RunBacktestResponse) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_engine_service_proto_rawDescGZIP(), []int{9}
}

func (x *RunBacktestResponse) GetBacktest() *Backtest {
	if x != nil {
		return x.Backtest
	}
	return nil
}

type GetCurrentPeriodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCurrentPeriodRequest) Reset() {
	*x = GetCurrentPeriodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentPeriodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentPeriodRequest) ProtoMessage() {}

func (x *GetCurrentPeriodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentPeriodRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentPeriodRequest) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_engine_service_proto_rawDescGZIP(), []int{10}
}

type GetCurrentPeriodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsRunning bool               `protobuf:"varint,1,opt,name=is_running,json=isRunning,proto3" json:"is_running,omitempty"`
	Portfolio *finance.Portfolio `protobuf:"bytes,2,opt,name=portfolio,proto3,oneof" json:"portfolio,omitempty"`
}

func (x *GetCurrentPeriodResponse) Reset() {
	*x = GetCurrentPeriodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentPeriodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentPeriodResponse) ProtoMessage() {}

func (x *GetCurrentPeriodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentPeriodResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentPeriodResponse) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_engine_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetCurrentPeriodResponse) GetIsRunning() bool {
	if x != nil {
		return x.IsRunning
	}
	return false
}

func (x *GetCurrentPeriodResponse) GetPortfolio() *finance.Portfolio {
	if x != nil {
		return x.Portfolio
	}
	return nil
}

type PlaceOrdersAndContinueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*finance.Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *PlaceOrdersAndContinueRequest) Reset() {
	*x = PlaceOrdersAndContinueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceOrdersAndContinueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceOrdersAndContinueRequest) ProtoMessage() {}

func (x *PlaceOrdersAndContinueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceOrdersAndContinueRequest.ProtoReflect.Descriptor instead.
func (*PlaceOrdersAndContinueRequest) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_engine_service_proto_rawDescGZIP(), []int{12}
}

func (x *PlaceOrdersAndContinueRequest) GetOrders() []*finance.Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

type PlaceOrdersAndContinueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlaceOrdersAndContinueResponse) Reset() {
	*x = PlaceOrdersAndContinueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceOrdersAndContinueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceOrdersAndContinueResponse) ProtoMessage() {}

func (x *PlaceOrdersAndContinueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceOrdersAndContinueResponse.ProtoReflect.Descriptor instead.
func (*PlaceOrdersAndContinueResponse) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_engine_service_proto_rawDescGZIP(), []int{13}
}

type GetResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Execution string `protobuf:"bytes,1,opt,name=execution,proto3" json:"execution,omitempty"`
	Upload    bool   `protobuf:"varint,2,opt,name=upload,proto3" json:"upload,omitempty"`
}

func (x *GetResultRequest) Reset() {
	*x = GetResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultRequest) ProtoMessage() {}

func (x *GetResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultRequest.ProtoReflect.Descriptor instead.
func (*GetResultRequest) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_engine_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetResultRequest) GetExecution() string {
	if x != nil {
		return x.Execution
	}
	return ""
}

func (x *GetResultRequest) GetUpload() bool {
	if x != nil {
		return x.Upload
	}
	return false
}

type GetResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Periods []*Period `protobuf:"bytes,1,rep,name=periods,proto3" json:"periods,omitempty"`
}

func (x *GetResultResponse) Reset() {
	*x = GetResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultResponse) ProtoMessage() {}

func (x *GetResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foreverbull_backtest_engine_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultResponse.ProtoReflect.Descriptor instead.
func (*GetResultResponse) Descriptor() ([]byte, []int) {
	return file_foreverbull_backtest_engine_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetResultResponse) GetPeriods() []*Period {
	if x != nil {
		return x.Periods
	}
	return nil
}

var File_foreverbull_backtest_engine_service_proto protoreflect.FileDescriptor

var file_foreverbull_backtest_engine_service_proto_rawDesc = []byte{
	0x0a, 0x29, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2f, 0x62, 0x61,
	0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x66, 0x6f, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2f, 0x62,
	0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62,
	0x75, 0x6c, 0x6c, 0x2f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x66, 0x6f, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x24, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2f, 0x62, 0x61, 0x63,
	0x6b, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x18, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0x5a, 0x0a, 0x19, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x0d,
	0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x09, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x06,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x10, 0x0a, 0x0e,
	0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23,
	0x0a, 0x11, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x50, 0x0a,
	0x12, 0x52, 0x75, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62,
	0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x74, 0x65, 0x73, 0x74, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x22,
	0x51, 0x0a, 0x13, 0x52, 0x75, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65,
	0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8a, 0x01,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66,
	0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x09,
	0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x22, 0x53, 0x0a, 0x1d, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6f,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22,
	0x20, 0x0a, 0x1e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x41, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x48, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x4b, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x32, 0xa3, 0x03, 0x0a, 0x06, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x12, 0x67, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c,
	0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x11,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x06, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c,
	0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0a, 0x4e,
	0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x66, 0x6f, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xd2,
	0x03, 0x0a, 0x0d, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x64, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x66, 0x6f, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x52, 0x75, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2d, 0x2e, 0x66, 0x6f, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x66, 0x6f, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x16,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x12, 0x33, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x66, 0x6f,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x41, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x26, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x66, 0x6f, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6c, 0x68, 0x6a, 0x6e, 0x69, 0x6c, 0x73, 0x73, 0x6f, 0x6e, 0x2f, 0x66, 0x6f, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x62, 0x75, 0x6c, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f,
	0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_foreverbull_backtest_engine_service_proto_rawDescOnce sync.Once
	file_foreverbull_backtest_engine_service_proto_rawDescData = file_foreverbull_backtest_engine_service_proto_rawDesc
)

func file_foreverbull_backtest_engine_service_proto_rawDescGZIP() []byte {
	file_foreverbull_backtest_engine_service_proto_rawDescOnce.Do(func() {
		file_foreverbull_backtest_engine_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_foreverbull_backtest_engine_service_proto_rawDescData)
	})
	return file_foreverbull_backtest_engine_service_proto_rawDescData
}

var file_foreverbull_backtest_engine_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_foreverbull_backtest_engine_service_proto_goTypes = []any{
	(*GetIngestionRequest)(nil),            // 0: foreverbull.backtest.GetIngestionRequest
	(*GetIngestionResponse)(nil),           // 1: foreverbull.backtest.GetIngestionResponse
	(*DownloadIngestionRequest)(nil),       // 2: foreverbull.backtest.DownloadIngestionRequest
	(*DownloadIngestionResponse)(nil),      // 3: foreverbull.backtest.DownloadIngestionResponse
	(*IngestRequest)(nil),                  // 4: foreverbull.backtest.IngestRequest
	(*IngestResponse)(nil),                 // 5: foreverbull.backtest.IngestResponse
	(*NewSessionRequest)(nil),              // 6: foreverbull.backtest.NewSessionRequest
	(*NewSessionResponse)(nil),             // 7: foreverbull.backtest.NewSessionResponse
	(*RunBacktestRequest)(nil),             // 8: foreverbull.backtest.RunBacktestRequest
	(*RunBacktestResponse)(nil),            // 9: foreverbull.backtest.RunBacktestResponse
	(*GetCurrentPeriodRequest)(nil),        // 10: foreverbull.backtest.GetCurrentPeriodRequest
	(*GetCurrentPeriodResponse)(nil),       // 11: foreverbull.backtest.GetCurrentPeriodResponse
	(*PlaceOrdersAndContinueRequest)(nil),  // 12: foreverbull.backtest.PlaceOrdersAndContinueRequest
	(*PlaceOrdersAndContinueResponse)(nil), // 13: foreverbull.backtest.PlaceOrdersAndContinueResponse
	(*GetResultRequest)(nil),               // 14: foreverbull.backtest.GetResultRequest
	(*GetResultResponse)(nil),              // 15: foreverbull.backtest.GetResultResponse
	(*Ingestion)(nil),                      // 16: foreverbull.backtest.Ingestion
	(*Backtest)(nil),                       // 17: foreverbull.backtest.Backtest
	(*finance.Portfolio)(nil),              // 18: foreverbull.finance.Portfolio
	(*finance.Order)(nil),                  // 19: foreverbull.finance.Order
	(*Period)(nil),                         // 20: foreverbull.backtest.Period
}
var file_foreverbull_backtest_engine_service_proto_depIdxs = []int32{
	16, // 0: foreverbull.backtest.GetIngestionResponse.ingestion:type_name -> foreverbull.backtest.Ingestion
	16, // 1: foreverbull.backtest.DownloadIngestionResponse.ingestion:type_name -> foreverbull.backtest.Ingestion
	16, // 2: foreverbull.backtest.IngestRequest.ingestion:type_name -> foreverbull.backtest.Ingestion
	17, // 3: foreverbull.backtest.RunBacktestRequest.backtest:type_name -> foreverbull.backtest.Backtest
	17, // 4: foreverbull.backtest.RunBacktestResponse.backtest:type_name -> foreverbull.backtest.Backtest
	18, // 5: foreverbull.backtest.GetCurrentPeriodResponse.portfolio:type_name -> foreverbull.finance.Portfolio
	19, // 6: foreverbull.backtest.PlaceOrdersAndContinueRequest.orders:type_name -> foreverbull.finance.Order
	20, // 7: foreverbull.backtest.GetResultResponse.periods:type_name -> foreverbull.backtest.Period
	0,  // 8: foreverbull.backtest.Engine.GetIngestion:input_type -> foreverbull.backtest.GetIngestionRequest
	2,  // 9: foreverbull.backtest.Engine.DownloadIngestion:input_type -> foreverbull.backtest.DownloadIngestionRequest
	4,  // 10: foreverbull.backtest.Engine.Ingest:input_type -> foreverbull.backtest.IngestRequest
	6,  // 11: foreverbull.backtest.Engine.NewSession:input_type -> foreverbull.backtest.NewSessionRequest
	8,  // 12: foreverbull.backtest.EngineSession.RunBacktest:input_type -> foreverbull.backtest.RunBacktestRequest
	10, // 13: foreverbull.backtest.EngineSession.GetCurrentPeriod:input_type -> foreverbull.backtest.GetCurrentPeriodRequest
	12, // 14: foreverbull.backtest.EngineSession.PlaceOrdersAndContinue:input_type -> foreverbull.backtest.PlaceOrdersAndContinueRequest
	14, // 15: foreverbull.backtest.EngineSession.GetResult:input_type -> foreverbull.backtest.GetResultRequest
	1,  // 16: foreverbull.backtest.Engine.GetIngestion:output_type -> foreverbull.backtest.GetIngestionResponse
	3,  // 17: foreverbull.backtest.Engine.DownloadIngestion:output_type -> foreverbull.backtest.DownloadIngestionResponse
	5,  // 18: foreverbull.backtest.Engine.Ingest:output_type -> foreverbull.backtest.IngestResponse
	7,  // 19: foreverbull.backtest.Engine.NewSession:output_type -> foreverbull.backtest.NewSessionResponse
	9,  // 20: foreverbull.backtest.EngineSession.RunBacktest:output_type -> foreverbull.backtest.RunBacktestResponse
	11, // 21: foreverbull.backtest.EngineSession.GetCurrentPeriod:output_type -> foreverbull.backtest.GetCurrentPeriodResponse
	13, // 22: foreverbull.backtest.EngineSession.PlaceOrdersAndContinue:output_type -> foreverbull.backtest.PlaceOrdersAndContinueResponse
	15, // 23: foreverbull.backtest.EngineSession.GetResult:output_type -> foreverbull.backtest.GetResultResponse
	16, // [16:24] is the sub-list for method output_type
	8,  // [8:16] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_foreverbull_backtest_engine_service_proto_init() }
func file_foreverbull_backtest_engine_service_proto_init() {
	if File_foreverbull_backtest_engine_service_proto != nil {
		return
	}
	file_foreverbull_backtest_backtest_proto_init()
	file_foreverbull_backtest_execution_proto_init()
	file_foreverbull_backtest_ingestion_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_foreverbull_backtest_engine_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetIngestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_engine_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetIngestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_engine_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DownloadIngestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_engine_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DownloadIngestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_engine_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*IngestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_engine_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*IngestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_engine_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*NewSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_engine_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*NewSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_engine_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RunBacktestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_engine_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*RunBacktestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_engine_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetCurrentPeriodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_engine_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetCurrentPeriodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_engine_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*PlaceOrdersAndContinueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_engine_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PlaceOrdersAndContinueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_engine_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GetResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foreverbull_backtest_engine_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*GetResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_foreverbull_backtest_engine_service_proto_msgTypes[4].OneofWrappers = []any{}
	file_foreverbull_backtest_engine_service_proto_msgTypes[11].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_foreverbull_backtest_engine_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_foreverbull_backtest_engine_service_proto_goTypes,
		DependencyIndexes: file_foreverbull_backtest_engine_service_proto_depIdxs,
		MessageInfos:      file_foreverbull_backtest_engine_service_proto_msgTypes,
	}.Build()
	File_foreverbull_backtest_engine_service_proto = out.File
	file_foreverbull_backtest_engine_service_proto_rawDesc = nil
	file_foreverbull_backtest_engine_service_proto_goTypes = nil
	file_foreverbull_backtest_engine_service_proto_depIdxs = nil
}
