// Code generated by mockery v2.46.3. DO NOT EDIT.

package backtest

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockEngineSessionServer is an autogenerated mock type for the EngineSessionServer type
type MockEngineSessionServer struct {
	mock.Mock
}

// GetCurrentPeriod provides a mock function with given fields: _a0, _a1
func (_m *MockEngineSessionServer) GetCurrentPeriod(_a0 context.Context, _a1 *GetCurrentPeriodRequest) (*GetCurrentPeriodResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentPeriod")
	}

	var r0 *GetCurrentPeriodResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetCurrentPeriodRequest) (*GetCurrentPeriodResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetCurrentPeriodRequest) *GetCurrentPeriodResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetCurrentPeriodResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetCurrentPeriodRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResult provides a mock function with given fields: _a0, _a1
func (_m *MockEngineSessionServer) GetResult(_a0 context.Context, _a1 *GetResultRequest) (*GetResultResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetResult")
	}

	var r0 *GetResultResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetResultRequest) (*GetResultResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetResultRequest) *GetResultResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetResultResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetResultRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaceOrdersAndContinue provides a mock function with given fields: _a0, _a1
func (_m *MockEngineSessionServer) PlaceOrdersAndContinue(_a0 context.Context, _a1 *PlaceOrdersAndContinueRequest) (*PlaceOrdersAndContinueResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PlaceOrdersAndContinue")
	}

	var r0 *PlaceOrdersAndContinueResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *PlaceOrdersAndContinueRequest) (*PlaceOrdersAndContinueResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *PlaceOrdersAndContinueRequest) *PlaceOrdersAndContinueResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PlaceOrdersAndContinueResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *PlaceOrdersAndContinueRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunBacktest provides a mock function with given fields: _a0, _a1
func (_m *MockEngineSessionServer) RunBacktest(_a0 context.Context, _a1 *RunBacktestRequest) (*RunBacktestResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RunBacktest")
	}

	var r0 *RunBacktestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *RunBacktestRequest) (*RunBacktestResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *RunBacktestRequest) *RunBacktestResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RunBacktestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *RunBacktestRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedEngineSessionServer provides a mock function with given fields:
func (_m *MockEngineSessionServer) mustEmbedUnimplementedEngineSessionServer() {
	_m.Called()
}

// NewMockEngineSessionServer creates a new instance of MockEngineSessionServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEngineSessionServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEngineSessionServer {
	mock := &MockEngineSessionServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
