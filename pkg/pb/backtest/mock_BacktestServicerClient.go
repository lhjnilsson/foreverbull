// Code generated by mockery v2.46.3. DO NOT EDIT.

package backtest

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockBacktestServicerClient is an autogenerated mock type for the BacktestServicerClient type
type MockBacktestServicerClient struct {
	mock.Mock
}

// CreateBacktest provides a mock function with given fields: ctx, in, opts
func (_m *MockBacktestServicerClient) CreateBacktest(ctx context.Context, in *CreateBacktestRequest, opts ...grpc.CallOption) (*CreateBacktestResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBacktest")
	}

	var r0 *CreateBacktestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateBacktestRequest, ...grpc.CallOption) (*CreateBacktestResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateBacktestRequest, ...grpc.CallOption) *CreateBacktestResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateBacktestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateBacktestRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSession provides a mock function with given fields: ctx, in, opts
func (_m *MockBacktestServicerClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 *CreateSessionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateSessionRequest, ...grpc.CallOption) (*CreateSessionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateSessionRequest, ...grpc.CallOption) *CreateSessionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateSessionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateSessionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBacktest provides a mock function with given fields: ctx, in, opts
func (_m *MockBacktestServicerClient) GetBacktest(ctx context.Context, in *GetBacktestRequest, opts ...grpc.CallOption) (*GetBacktestResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBacktest")
	}

	var r0 *GetBacktestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetBacktestRequest, ...grpc.CallOption) (*GetBacktestResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetBacktestRequest, ...grpc.CallOption) *GetBacktestResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetBacktestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetBacktestRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExecution provides a mock function with given fields: ctx, in, opts
func (_m *MockBacktestServicerClient) GetExecution(ctx context.Context, in *GetExecutionRequest, opts ...grpc.CallOption) (*GetExecutionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExecution")
	}

	var r0 *GetExecutionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetExecutionRequest, ...grpc.CallOption) (*GetExecutionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetExecutionRequest, ...grpc.CallOption) *GetExecutionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetExecutionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetExecutionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSession provides a mock function with given fields: ctx, in, opts
func (_m *MockBacktestServicerClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *GetSessionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetSessionRequest, ...grpc.CallOption) (*GetSessionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetSessionRequest, ...grpc.CallOption) *GetSessionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetSessionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetSessionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBacktests provides a mock function with given fields: ctx, in, opts
func (_m *MockBacktestServicerClient) ListBacktests(ctx context.Context, in *ListBacktestsRequest, opts ...grpc.CallOption) (*ListBacktestsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBacktests")
	}

	var r0 *ListBacktestsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListBacktestsRequest, ...grpc.CallOption) (*ListBacktestsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListBacktestsRequest, ...grpc.CallOption) *ListBacktestsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListBacktestsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListBacktestsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExecutions provides a mock function with given fields: ctx, in, opts
func (_m *MockBacktestServicerClient) ListExecutions(ctx context.Context, in *ListExecutionsRequest, opts ...grpc.CallOption) (*ListExecutionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListExecutions")
	}

	var r0 *ListExecutionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListExecutionsRequest, ...grpc.CallOption) (*ListExecutionsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListExecutionsRequest, ...grpc.CallOption) *ListExecutionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListExecutionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListExecutionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockBacktestServicerClient creates a new instance of MockBacktestServicerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBacktestServicerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBacktestServicerClient {
	mock := &MockBacktestServicerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
