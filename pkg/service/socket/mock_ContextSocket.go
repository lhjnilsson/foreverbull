// Code generated by mockery v2.18.0. DO NOT EDIT.

package socket

import mock "github.com/stretchr/testify/mock"

// MockContextSocket is an autogenerated mock type for the ContextSocket type
type MockContextSocket struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockContextSocket) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields:
func (_m *MockContextSocket) Get() (ReadWriter, error) {
	ret := _m.Called()

	var r0 ReadWriter
	if rf, ok := ret.Get(0).(func() ReadWriter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ReadWriter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockContextSocket interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockContextSocket creates a new instance of MockContextSocket. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockContextSocket(t mockConstructorTestingTNewMockContextSocket) *MockContextSocket {
	mock := &MockContextSocket{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
