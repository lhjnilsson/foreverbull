// Code generated by mockery v2.18.0. DO NOT EDIT.

package container

import (
	context "context"

	entity "github.com/lhjnilsson/foreverbull/pkg/service/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockImage is an autogenerated mock type for the Image type
type MockImage struct {
	mock.Mock
}

// Info provides a mock function with given fields: ctx, name
func (_m *MockImage) Info(ctx context.Context, name string) (*entity.Image, error) {
	ret := _m.Called(ctx, name)

	var r0 *entity.Image
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Image); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pull provides a mock function with given fields: ctx, name
func (_m *MockImage) Pull(ctx context.Context, name string) (*entity.Image, error) {
	ret := _m.Called(ctx, name)

	var r0 *entity.Image
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Image); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, name
func (_m *MockImage) Remove(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockImage interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockImage creates a new instance of MockImage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockImage(t mockConstructorTestingTNewMockImage) *MockImage {
	mock := &MockImage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
