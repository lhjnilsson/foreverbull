// Code generated by mockery v2.18.0. DO NOT EDIT.

package api

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// ConfigureInstance provides a mock function with given fields: ctx, InstanceID, config
func (_m *MockClient) ConfigureInstance(ctx context.Context, InstanceID string, config *ConfigureInstanceRequest) (*InstanceResponse, error) {
	ret := _m.Called(ctx, InstanceID, config)

	var r0 *InstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *ConfigureInstanceRequest) *InstanceResponse); ok {
		r0 = rf(ctx, InstanceID, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*InstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *ConfigureInstanceRequest) error); ok {
		r1 = rf(ctx, InstanceID, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateService provides a mock function with given fields: ctx, service
func (_m *MockClient) CreateService(ctx context.Context, service *CreateServiceRequest) (*ServiceResponse, error) {
	ret := _m.Called(ctx, service)

	var r0 *ServiceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CreateServiceRequest) *ServiceResponse); ok {
		r0 = rf(ctx, service)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ServiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CreateServiceRequest) error); ok {
		r1 = rf(ctx, service)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DownloadImage provides a mock function with given fields: ctx, image
func (_m *MockClient) DownloadImage(ctx context.Context, image string) (*ImageResponse, error) {
	ret := _m.Called(ctx, image)

	var r0 *ImageResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *ImageResponse); ok {
		r0 = rf(ctx, image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ImageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImage provides a mock function with given fields: ctx, image
func (_m *MockClient) GetImage(ctx context.Context, image string) (*ImageResponse, error) {
	ret := _m.Called(ctx, image)

	var r0 *ImageResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *ImageResponse); ok {
		r0 = rf(ctx, image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ImageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstance provides a mock function with given fields: ctx, InstanceID
func (_m *MockClient) GetInstance(ctx context.Context, InstanceID string) (*InstanceResponse, error) {
	ret := _m.Called(ctx, InstanceID)

	var r0 *InstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *InstanceResponse); ok {
		r0 = rf(ctx, InstanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*InstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, InstanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetService provides a mock function with given fields: ctx, image
func (_m *MockClient) GetService(ctx context.Context, image string) (*ServiceResponse, error) {
	ret := _m.Called(ctx, image)

	var r0 *ServiceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *ServiceResponse); ok {
		r0 = rf(ctx, image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ServiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstances provides a mock function with given fields: ctx, image
func (_m *MockClient) ListInstances(ctx context.Context, image string) (*[]InstanceResponse, error) {
	ret := _m.Called(ctx, image)

	var r0 *[]InstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]InstanceResponse); ok {
		r0 = rf(ctx, image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]InstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServices provides a mock function with given fields: ctx
func (_m *MockClient) ListServices(ctx context.Context) (*[]ServiceResponse, error) {
	ret := _m.Called(ctx)

	var r0 *[]ServiceResponse
	if rf, ok := ret.Get(0).(func(context.Context) *[]ServiceResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]ServiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopInstance provides a mock function with given fields: ctx, InstanceID
func (_m *MockClient) StopInstance(ctx context.Context, InstanceID string) error {
	ret := _m.Called(ctx, InstanceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, InstanceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockClient(t mockConstructorTestingTNewMockClient) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
