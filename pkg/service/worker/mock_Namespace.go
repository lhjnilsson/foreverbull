// Code generated by mockery v2.18.0. DO NOT EDIT.

package worker

import (
	mock "github.com/stretchr/testify/mock"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// MockNamespace is an autogenerated mock type for the Namespace type
type MockNamespace struct {
	mock.Mock
}

// Flush provides a mock function with given fields:
func (_m *MockNamespace) Flush() {
	_m.Called()
}

// Get provides a mock function with given fields: key
func (_m *MockNamespace) Get(key string) *structpb.Struct {
	ret := _m.Called(key)

	var r0 *structpb.Struct
	if rf, ok := ret.Get(0).(func(string) *structpb.Struct); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structpb.Struct)
		}
	}

	return r0
}

// Set provides a mock function with given fields: key, value
func (_m *MockNamespace) Set(key string, value *structpb.Struct) error {
	ret := _m.Called(key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *structpb.Struct) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockNamespace interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockNamespace creates a new instance of MockNamespace. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockNamespace(t mockConstructorTestingTNewMockNamespace) *MockNamespace {
	mock := &MockNamespace{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
