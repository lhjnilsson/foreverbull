// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: foreverbull/strategy/strategy_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StrategyServicer_RunStrategy_FullMethodName = "/foreverbull.strategy.StrategyServicer/RunStrategy"
)

// StrategyServicerClient is the client API for StrategyServicer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StrategyServicerClient interface {
	RunStrategy(ctx context.Context, in *RunStrategyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RunStrategyResponse], error)
}

type strategyServicerClient struct {
	cc grpc.ClientConnInterface
}

func NewStrategyServicerClient(cc grpc.ClientConnInterface) StrategyServicerClient {
	return &strategyServicerClient{cc}
}

func (c *strategyServicerClient) RunStrategy(ctx context.Context, in *RunStrategyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RunStrategyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StrategyServicer_ServiceDesc.Streams[0], StrategyServicer_RunStrategy_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RunStrategyRequest, RunStrategyResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StrategyServicer_RunStrategyClient = grpc.ServerStreamingClient[RunStrategyResponse]

// StrategyServicerServer is the server API for StrategyServicer service.
// All implementations must embed UnimplementedStrategyServicerServer
// for forward compatibility.
type StrategyServicerServer interface {
	RunStrategy(*RunStrategyRequest, grpc.ServerStreamingServer[RunStrategyResponse]) error
	mustEmbedUnimplementedStrategyServicerServer()
}

// UnimplementedStrategyServicerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStrategyServicerServer struct{}

func (UnimplementedStrategyServicerServer) RunStrategy(*RunStrategyRequest, grpc.ServerStreamingServer[RunStrategyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RunStrategy not implemented")
}
func (UnimplementedStrategyServicerServer) mustEmbedUnimplementedStrategyServicerServer() {}
func (UnimplementedStrategyServicerServer) testEmbeddedByValue()                          {}

// UnsafeStrategyServicerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StrategyServicerServer will
// result in compilation errors.
type UnsafeStrategyServicerServer interface {
	mustEmbedUnimplementedStrategyServicerServer()
}

func RegisterStrategyServicerServer(s grpc.ServiceRegistrar, srv StrategyServicerServer) {
	// If the following call pancis, it indicates UnimplementedStrategyServicerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StrategyServicer_ServiceDesc, srv)
}

func _StrategyServicer_RunStrategy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunStrategyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StrategyServicerServer).RunStrategy(m, &grpc.GenericServerStream[RunStrategyRequest, RunStrategyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StrategyServicer_RunStrategyServer = grpc.ServerStreamingServer[RunStrategyResponse]

// StrategyServicer_ServiceDesc is the grpc.ServiceDesc for StrategyServicer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StrategyServicer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "foreverbull.strategy.StrategyServicer",
	HandlerType: (*StrategyServicerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunStrategy",
			Handler:       _StrategyServicer_RunStrategy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "foreverbull/strategy/strategy_service.proto",
}
