// Code generated by mockery v2.46.3. DO NOT EDIT.

package pb

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockFinanceServer is an autogenerated mock type for the FinanceServer type
type MockFinanceServer struct {
	mock.Mock
}

// DownloadHistoricalData provides a mock function with given fields: _a0, _a1
func (_m *MockFinanceServer) DownloadHistoricalData(_a0 context.Context, _a1 *DownloadHistoricalDataRequest) (*DownloadHistoricalDataResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DownloadHistoricalData")
	}

	var r0 *DownloadHistoricalDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *DownloadHistoricalDataRequest) (*DownloadHistoricalDataResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *DownloadHistoricalDataRequest) *DownloadHistoricalDataResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DownloadHistoricalDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *DownloadHistoricalDataRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAsset provides a mock function with given fields: _a0, _a1
func (_m *MockFinanceServer) GetAsset(_a0 context.Context, _a1 *GetAssetRequest) (*GetAssetResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAsset")
	}

	var r0 *GetAssetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetAssetRequest) (*GetAssetResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetAssetRequest) *GetAssetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetAssetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetAssetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIndex provides a mock function with given fields: _a0, _a1
func (_m *MockFinanceServer) GetIndex(_a0 context.Context, _a1 *GetIndexRequest) (*GetIndexResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetIndex")
	}

	var r0 *GetIndexResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetIndexRequest) (*GetIndexResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetIndexRequest) *GetIndexResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetIndexResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetIndexRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedFinanceServer provides a mock function with given fields:
func (_m *MockFinanceServer) mustEmbedUnimplementedFinanceServer() {
	_m.Called()
}

// NewMockFinanceServer creates a new instance of MockFinanceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFinanceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFinanceServer {
	mock := &MockFinanceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
