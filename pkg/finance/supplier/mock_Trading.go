// Code generated by mockery v2.46.3. DO NOT EDIT.

package supplier

import (
	finance "github.com/lhjnilsson/foreverbull/pkg/pb/finance"
	mock "github.com/stretchr/testify/mock"
)

// MockTrading is an autogenerated mock type for the Trading type
type MockTrading struct {
	mock.Mock
}

// GetOrders provides a mock function with given fields:
func (_m *MockTrading) GetOrders() ([]*finance.Order, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []*finance.Order
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*finance.Order, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*finance.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*finance.Order)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPortfolio provides a mock function with given fields:
func (_m *MockTrading) GetPortfolio() (*finance.Portfolio, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPortfolio")
	}

	var r0 *finance.Portfolio
	var r1 error
	if rf, ok := ret.Get(0).(func() (*finance.Portfolio, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *finance.Portfolio); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finance.Portfolio)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaceOrder provides a mock function with given fields: _a0
func (_m *MockTrading) PlaceOrder(_a0 *finance.Order) (*finance.Order, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PlaceOrder")
	}

	var r0 *finance.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(*finance.Order) (*finance.Order, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*finance.Order) *finance.Order); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finance.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(*finance.Order) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockTrading creates a new instance of MockTrading. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTrading(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTrading {
	mock := &MockTrading{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
