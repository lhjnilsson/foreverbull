// Code generated by mockery v2.18.0. DO NOT EDIT.

package supplier

import (
	time "time"

	pb "github.com/lhjnilsson/foreverbull/pkg/finance/pb"
	mock "github.com/stretchr/testify/mock"
)

// MockMarketdata is an autogenerated mock type for the Marketdata type
type MockMarketdata struct {
	mock.Mock
}

// GetAsset provides a mock function with given fields: symbol
func (_m *MockMarketdata) GetAsset(symbol string) (*pb.Asset, error) {
	ret := _m.Called(symbol)

	var r0 *pb.Asset
	if rf, ok := ret.Get(0).(func(string) *pb.Asset); ok {
		r0 = rf(symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Asset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIndex provides a mock function with given fields: symbol
func (_m *MockMarketdata) GetIndex(symbol string) ([]*pb.Asset, error) {
	ret := _m.Called(symbol)

	var r0 []*pb.Asset
	if rf, ok := ret.Get(0).(func(string) []*pb.Asset); ok {
		r0 = rf(symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.Asset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOHLC provides a mock function with given fields: symbol, start, end
func (_m *MockMarketdata) GetOHLC(symbol string, start time.Time, end time.Time) ([]*pb.OHLC, error) {
	ret := _m.Called(symbol, start, end)

	var r0 []*pb.OHLC
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time) []*pb.OHLC); ok {
		r0 = rf(symbol, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.OHLC)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Time, time.Time) error); ok {
		r1 = rf(symbol, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockMarketdata interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMarketdata creates a new instance of MockMarketdata. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMarketdata(t mockConstructorTestingTNewMockMarketdata) *MockMarketdata {
	mock := &MockMarketdata{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
